"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[887],{5413:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=r(3117),n=(r(7294),r(3905));const o={id:"fees",title:"Fees",sidebar_position:3},a="Fees",l={unversionedId:"concepts/protocol/fees",id:"concepts/protocol/fees",title:"Fees",description:"Overview",source:"@site/docs/concepts/protocol/fees.md",sourceDirName:"concepts/protocol",slug:"/concepts/protocol/fees",permalink:"/concepts/protocol/fees",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"fees",title:"Fees",sidebar_position:3},sidebar:"conceptsSidebar",previous:{title:"Swaps",permalink:"/concepts/protocol/swaps"},next:{title:"Oracle",permalink:"/concepts/protocol/oracle"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Swap Fees by Version",id:"swap-fees-by-version",level:2},{value:"Liquidity Provision Fees",id:"liquidity-provision-fees",level:2},{value:"Fee Distribution",id:"fee-distribution",level:2},{value:"Future Plans",id:"future-plans",level:2},{value:"Important Notes",id:"important-notes",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"fees"},"Fees"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Anarkoswap inherits its fee structure from the underlying Uniswap protocols (v1, v2, and v3). Fees are charged on swaps and liquidity provision to incentivize liquidity providers and maintain the health of the protocol."),(0,n.kt)("h2",{id:"swap-fees-by-version"},"Swap Fees by Version"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Uniswap v1:"),"  "),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fee: 0.30% per swap  "),(0,n.kt)("li",{parentName:"ul"},"Fees are collected and distributed to liquidity providers of the respective pool."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Uniswap v2:"),"  "),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fee: 0.30% per swap  "),(0,n.kt)("li",{parentName:"ul"},"Same fee structure as v1, with improved routing and flash swap capabilities."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Uniswap v3:"),"  "),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Multiple fee tiers: 0.05%, 0.30%, and 1.00% per swap, depending on the pool.  "),(0,n.kt)("li",{parentName:"ul"},"Liquidity providers choose the fee tier when creating pools, allowing optimization for different asset pairs and risk profiles.")))),(0,n.kt)("h2",{id:"liquidity-provision-fees"},"Liquidity Provision Fees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Liquidity providers earn fees proportional to their share of the pool's liquidity.  "),(0,n.kt)("li",{parentName:"ul"},"Fees accumulate in the pool and can be claimed by LPs when they withdraw liquidity.")),(0,n.kt)("h2",{id:"fee-distribution"},"Fee Distribution"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Swap fees collected are automatically added to the liquidity pool, increasing the value of LP tokens.  "),(0,n.kt)("li",{parentName:"ul"},"No fees are taken by Anarkoswap protocol itself; all fees go directly to liquidity providers.")),(0,n.kt)("h2",{id:"future-plans"},"Future Plans"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Introduction of a native reward token to complement swap fees and provide additional incentives.  "),(0,n.kt)("li",{parentName:"ul"},"Possible protocol fee or governance fee models subject to community voting.")),(0,n.kt)("h2",{id:"important-notes"},"Important Notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fees vary by pool and protocol version; users should check fees before executing swaps or adding liquidity.  "),(0,n.kt)("li",{parentName:"ul"},"Slippage and price impact are separate from fees but affect the effective cost of trades.")),(0,n.kt)("hr",null))}u.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=i.createContext({}),p=function(e){var t=i.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),f=n,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?i.createElement(m,a(a({ref:t},c),{},{components:r})):i.createElement(m,a({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var p=2;p<o;p++)a[p]=r[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);