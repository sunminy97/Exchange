{"version":3,"file":"static/js/149.8b6e4ba7.chunk.js","mappings":"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","sources":["webpack://@uniswap/interface/./src/pages/Pool/index.tsx?2ba0","webpack://@uniswap/interface/./src/components/Liquidity/LpIncentiveClaimModal.tsx?09c9","webpack://@uniswap/interface/./src/components/Dialog/DialogV2.tsx?3fc1","webpack://@uniswap/interface/./src/pages/Pool/Positions/PositionsHeader.tsx?2c6c","webpack://@uniswap/interface/./src/components/Dialog/DialogV2.tsx?f738","hooks/useLpIncentivesClaim.ts","hooks/useLpIncentivesClaimData.ts","../../../packages/uniswap/src/data/tradingApi/__generated__/models/Distributor.ts","webpack://@uniswap/interface/./src/components/Liquidity/LpIncentiveClaimModal.tsx?0e53","components/Liquidity/hooks/LpIncentiveClaim/useFormattedTokenRewards.ts","components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimMutation.ts","components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimButtonConfig.ts","hooks/useLpIncentives.ts","hooks/useLpIncentivesTransactionState.ts","../../../packages/uniswap/src/data/rest/getPoolsRewards.ts","webpack://@uniswap/interface/./src/pages/Pool/Positions/PositionsHeader.tsx?28da","webpack://@uniswap/interface/./src/pages/Pool/index.tsx?a418"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { GetHelpHeader } from \"components/Modal/GetHelpHeader\";\nimport { Button, Flex, Text } from \"ui/src\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { LearnMoreLink } from \"uniswap/src/components/text/LearnMoreLink\";\nimport { isExtension } from \"utilities/src/platform\";\nexport function DialogV2({\n  isOpen,\n  onClose,\n  icon,\n  title,\n  subtext,\n  learnMoreUrl,\n  modalName,\n  primaryButtonText,\n  primaryButtonOnClick,\n  primaryButtonVariant = \"branded\",\n  primaryButtonEmphasis,\n  isPrimaryButtonLoading,\n  secondaryButtonText,\n  secondaryButtonOnClick,\n  secondaryButtonVariant = \"default\",\n  secondaryButtonEmphasis = \"secondary\",\n  alignment = isExtension ? \"top\" : void 0,\n  children,\n  displayHelpCTA = false\n}) {\n  return <Modal alignment={alignment} isModalOpen={isOpen} name={modalName} onClose={onClose}>{displayHelpCTA && <GetHelpHeader closeModal={onClose} />}<Flex flexDirection=\"column\" alignItems=\"center\" p=\"$spacing12\" gap=\"$spacing8\">{icon}<Text variant=\"subheading1\" color=\"$neutral1\" mt=\"$spacing8\">{title}</Text>{typeof subtext === \"string\" ? <Text variant=\"body3\" color=\"$neutral2\" textAlign=\"center\">{subtext}</Text> : subtext}{learnMoreUrl && <LearnMoreLink url={learnMoreUrl} textColor=\"$neutral1\" textVariant=\"body3\" />}{children && <Flex>{children}</Flex>}<Flex gap=\"$spacing8\" width=\"100%\" mt=\"$spacing16\"><Button\n    variant={primaryButtonVariant}\n    emphasis={primaryButtonEmphasis}\n    minHeight=\"$spacing48\"\n    onPress={primaryButtonOnClick}\n    loading={isPrimaryButtonLoading}\n  >{primaryButtonText}</Button>{secondaryButtonText && secondaryButtonOnClick && <Button\n    variant={secondaryButtonVariant}\n    emphasis={secondaryButtonEmphasis}\n    minHeight=\"$spacing48\"\n    onPress={secondaryButtonOnClick}\n  >{secondaryButtonText}</Button>}</Flex></Flex></Modal>;\n}\n","\"use strict\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { lpIncentivesClaimSaga } from \"state/sagas/lp_incentives/lpIncentivesSaga\";\nexport function useLpIncentivesClaim() {\n  const dispatch = useDispatch();\n  const selectChain = useSelectChain();\n  return useCallback(\n    (params) => {\n      const wrappedSelectChain = async (chainId) => {\n        return selectChain(chainId);\n      };\n      dispatch(\n        lpIncentivesClaimSaga.actions.trigger({\n          ...params,\n          selectChain: wrappedSelectChain\n        })\n      );\n    },\n    [dispatch, selectChain]\n  );\n}\n","\"use strict\";\nimport { useCallback } from \"react\";\nimport { fetchClaimLpIncentiveRewards } from \"uniswap/src/data/apiClients/tradingApi/TradingApiClient\";\nexport function useLpIncentivesClaimData() {\n  return useCallback(\n    async ({\n      walletAddress,\n      chainId,\n      tokens,\n      distributor\n    }) => {\n      try {\n        const response = await fetchClaimLpIncentiveRewards({\n          walletAddress,\n          chainId,\n          tokens,\n          distributor,\n          simulateTransaction: true\n        });\n        return { data: response, error: null };\n      } catch (error) {\n        return { data: null, error: error instanceof Error ? error : new Error(\"Failed to fetch claim data\") };\n      }\n    },\n    []\n  );\n}\n","export var Distributor = /* @__PURE__ */ ((Distributor2) => {\n  Distributor2[\"MERKL\"] = \"MERKL\";\n  return Distributor2;\n})(Distributor || {});\n","\"use strict\";\nimport { DialogV2 } from \"components/Dialog/DialogV2\";\nimport { useFormattedTokenRewards } from \"components/Liquidity/hooks/LpIncentiveClaim/useFormattedTokenRewards\";\nimport { useLpIncentiveClaimButtonConfig } from \"components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimButtonConfig\";\nimport { useLpIncentiveClaimMutation } from \"components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimMutation\";\nimport { LP_INCENTIVES_REWARD_TOKEN } from \"components/LpIncentives/constants\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, Image, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { InlineWarningCard } from \"uniswap/src/components/InlineWarningCard/InlineWarningCard\";\nimport { WarningSeverity } from \"uniswap/src/components/modals/WarningModal/types\";\nimport { ModalName, UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { useEvent } from \"utilities/src/react/hooks\";\nimport { didUserReject } from \"utils/swapErrorToUserReadableMessage\";\nexport function LpIncentiveClaimModal({\n  isOpen,\n  onClose,\n  onSuccess,\n  token = LP_INCENTIVES_REWARD_TOKEN,\n  tokenRewards,\n  isPendingTransaction = false,\n  iconUrl\n}) {\n  const [error, setError] = useState(null);\n  const { t } = useTranslation();\n  const formattedTokenRewards = useFormattedTokenRewards({ tokenRewards, token });\n  const { mutate: claim, isPending } = useLpIncentiveClaimMutation({\n    token,\n    onSuccess,\n    onClose,\n    onError: (error2) => {\n      if (didUserReject(error2)) {\n        return;\n      }\n      logger.error(error2, {\n        tags: {\n          file: \"LpIncentiveClaimModal\",\n          function: \"useLpIncentiveClaimMutation\"\n        }\n      });\n      setError(t(\"pool.incentives.collectFailed\"));\n    }\n  });\n  const handleClaim = useEvent(({ skipAnalytics = false } = {}) => {\n    if (!skipAnalytics) {\n      sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsRetry);\n    }\n    setError(null);\n    claim();\n  });\n  useEffect(() => {\n    if (isOpen && !isPendingTransaction) {\n      handleClaim({ skipAnalytics: true });\n    }\n  }, [isOpen, isPendingTransaction, handleClaim]);\n  const buttonConfig = useLpIncentiveClaimButtonConfig({\n    isLoading: isPending,\n    isPendingTransaction,\n    onClaim: () => handleClaim()\n    // Don't skip analytics for manual claim\n  });\n  return <DialogV2\n    isOpen={isOpen}\n    icon={iconUrl ? <Image src={iconUrl} width={iconSizes.icon48} height={iconSizes.icon48} objectFit=\"cover\" /> : void 0}\n    title={t(\"pool.incentives.collectingRewards\")}\n    subtext={<Flex gap=\"$spacing4\"><Flex row alignItems=\"center\" justifyContent=\"center\" gap=\"$spacing4\"><Text variant=\"body2\">{`${formattedTokenRewards} ${token.symbol}`}</Text></Flex>{error && <Flex mt=\"$spacing6\"><InlineWarningCard\n      severity={WarningSeverity.Medium}\n      description={t(\"pool.incentives.collectFailed\")}\n      hideCtaIcon\n    /></Flex>}</Flex>}\n    displayHelpCTA\n    onClose={onClose}\n    primaryButtonOnClick={buttonConfig.onClick}\n    isPrimaryButtonLoading={buttonConfig.isLoading}\n    modalName={ModalName.LpIncentiveClaimModal}\n    primaryButtonText={buttonConfig.title}\n  />;\n}\n","\"use strict\";\nimport { formatTokenAmount } from \"components/Liquidity/utils\";\nimport { useMemo } from \"react\";\nexport function useFormattedTokenRewards({ tokenRewards, token }) {\n  return useMemo(() => {\n    return formatTokenAmount(tokenRewards, token.decimals);\n  }, [tokenRewards, token.decimals]);\n}\n","\"use strict\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useLpIncentivesClaim } from \"hooks/useLpIncentivesClaim\";\nimport { useLpIncentivesClaimData } from \"hooks/useLpIncentivesClaimData\";\nimport { Distributor } from \"uniswap/src/data/tradingApi/__generated__\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nexport function useLpIncentiveClaimMutation({ token, onSuccess, onClose, onError }) {\n  const account = useAccount();\n  const { address, chainId } = account;\n  const lpIncentivesClaim = useLpIncentivesClaim();\n  const lpIncentivesClaimData = useLpIncentivesClaimData();\n  return useMutation({\n    mutationFn: async () => {\n      if (!address || !chainId) {\n        throw new Error(\"No wallet address available\");\n      }\n      const { data, error } = await lpIncentivesClaimData({\n        walletAddress: address,\n        chainId: token.chainId,\n        tokens: [token.address],\n        distributor: Distributor.MERKL\n      });\n      if (error) {\n        sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsErrorThrown, {\n          error: error.message ?? \"Lp Incentive claim rewards error\"\n        });\n        throw error;\n      }\n      if (!data) {\n        throw new Error(\"No claim data available\");\n      }\n      return new Promise((resolve, reject) => {\n        lpIncentivesClaim({\n          account: { type: AccountType.SignerMnemonic, address },\n          claimData: data,\n          chainId,\n          tokenAddress: token.address,\n          onSuccess: () => {\n            resolve();\n          },\n          onFailure: (error2) => {\n            reject(error2);\n          },\n          setCurrentStep: () => {\n          }\n          // Optional: Add step tracking if needed\n        });\n      });\n    },\n    onSuccess: () => {\n      onSuccess?.();\n      onClose?.();\n    },\n    onError: (error) => {\n      onError?.(error);\n    }\n  });\n}\n","\"use strict\";\nimport { DialogButtonType } from \"components/Dialog/Dialog\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nexport function useLpIncentiveClaimButtonConfig({\n  isLoading,\n  isPendingTransaction,\n  onClaim\n}) {\n  const { t } = useTranslation();\n  return useMemo(() => {\n    if (isLoading) {\n      return {\n        title: t(\"common.confirmWallet\"),\n        onClick: () => {\n        },\n        isLoading: true\n      };\n    }\n    if (isPendingTransaction) {\n      return {\n        title: t(\"common.transactionPending\"),\n        onClick: () => {\n        },\n        isLoading: true\n      };\n    }\n    return {\n      title: t(\"pool.incentives.collect\"),\n      type: DialogButtonType.Accent,\n      onClick: onClaim,\n      isLoading\n    };\n  }, [onClaim, isLoading, isPendingTransaction, t]);\n}\n","\"use strict\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useLpIncentivesTransactionState } from \"hooks/useLpIncentivesTransactionState\";\nimport { useAtom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport { useCallback, useState } from \"react\";\nimport { useGetPoolsRewards } from \"uniswap/src/data/rest/getPoolsRewards\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nexport const lpIncentivesLastClaimedAtom = atomWithStorage(\n  \"lpIncentivesLastClaimed\",\n  null\n);\nexport function useLpIncentives() {\n  const isPendingTransaction = useLpIncentivesTransactionState();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [tokenRewards, setTokenRewards] = useState(\"0\");\n  const [hasCollectedRewards, setHasCollectedRewards] = useState(false);\n  const account = useAccount();\n  const [, setLastClaimed] = useAtom(lpIncentivesLastClaimedAtom);\n  const { refetch } = useGetPoolsRewards(\n    { walletAddress: account?.address, chainIds: [UniverseChainId.Mainnet], reload: true },\n    false\n  );\n  const onTransactionSuccess = useCallback(async () => {\n    setIsModalOpen(false);\n    setHasCollectedRewards(true);\n    if (account?.address) {\n      try {\n        const { data: rewardsData } = await refetch();\n        const rewardsAmount = rewardsData?.totalUnclaimedAmountUni;\n        if (rewardsAmount && rewardsAmount !== \"0\") {\n          setLastClaimed({ timestamp: Date.now(), amount: rewardsAmount });\n        } else {\n          setLastClaimed(null);\n        }\n      } catch (error) {\n        setLastClaimed(null);\n      }\n    }\n  }, [refetch, account?.address, setLastClaimed]);\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n  return {\n    isPendingTransaction,\n    isModalOpen,\n    tokenRewards,\n    openModal,\n    closeModal,\n    setTokenRewards,\n    onTransactionSuccess,\n    hasCollectedRewards\n  };\n}\n","\"use strict\";\nimport { useEffect, useState } from \"react\";\nimport { usePendingTransactions } from \"state/transactions/hooks\";\nimport { TransactionType } from \"state/transactions/types\";\nexport function useLpIncentivesTransactionState() {\n  const [isPendingTransaction, setIsPendingTransaction] = useState(false);\n  const pendingTransactions = usePendingTransactions();\n  useEffect(() => {\n    const hasPendingClaim = pendingTransactions.some(\n      (tx) => tx.info.type === TransactionType.LP_INCENTIVES_CLAIM_REWARDS\n    );\n    setIsPendingTransaction(hasPendingClaim);\n  }, [pendingTransactions]);\n  return isPendingTransaction;\n}\n","import { useQuery } from \"@connectrpc/connect-query\";\nimport { getRewards } from \"@uniswap/client-pools/dist/pools/v1/api-PoolsService_connectquery\";\nimport { uniswapGetTransport } from \"uniswap/src/data/rest/base\";\nexport function useGetPoolsRewards(input, enabled = true) {\n  return useQuery(getRewards, input, { transport: uniswapGetTransport, enabled });\n}\n","\"use strict\";\nimport { PositionStatus, ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { DropdownSelector } from \"components/DropdownSelector\";\nimport { lpStatusConfig } from \"components/Liquidity/constants\";\nimport { getProtocolStatusLabel, getProtocolVersionLabel } from \"components/Liquidity/utils\";\nimport { useMemo, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ClickableTamaguiStyle } from \"theme/components/styles\";\nimport { Flex, LabeledCheckbox, Text, useMedia } from \"ui/src\";\nimport { Plus } from \"ui/src/components/icons/Plus\";\nimport { StatusIndicatorCircle } from \"ui/src/components/icons/StatusIndicatorCircle\";\nimport { NetworkFilter } from \"uniswap/src/components/network/NetworkFilter\";\nimport { useEnabledChains } from \"uniswap/src/features/chains/hooks/useEnabledChains\";\nconst StyledDropdownButton = {\n  borderRadius: \"$rounded16\",\n  py: \"$padding8\",\n  px: \"$padding12\",\n  backgroundColor: \"$surface3\",\n  borderWidth: 0,\n  hoverStyle: {\n    ...ClickableTamaguiStyle.hoverStyle,\n    backgroundColor: \"none\"\n  }\n};\nconst PROTOCOL_VERSIONS = [ProtocolVersion.V4, ProtocolVersion.V3, ProtocolVersion.V2];\nexport function PositionsHeader({\n  showFilters = true,\n  selectedChain,\n  selectedVersions,\n  selectedStatus,\n  onChainChange,\n  onVersionChange,\n  onStatusChange\n}) {\n  const { t } = useTranslation();\n  const { chains } = useEnabledChains();\n  const navigate = useNavigate();\n  const media = useMedia();\n  const statusFilterOptions = useMemo(() => {\n    return [PositionStatus.IN_RANGE, PositionStatus.OUT_OF_RANGE, PositionStatus.CLOSED].map((status) => {\n      const config = lpStatusConfig[status];\n      if (!config) {\n        return <></>;\n      }\n      return <Flex\n        key={`PositionsHeader-status-${status}`}\n        row\n        gap=\"$spacing8\"\n        width=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      ><StatusIndicatorCircle color={config.color} /><LabeledCheckbox\n        py=\"$spacing4\"\n        size=\"$icon.18\"\n        hoverStyle={{ opacity: 0.8, backgroundColor: \"unset\" }}\n        containerStyle={{ flex: 1 }}\n        checkboxPosition=\"end\"\n        checked={selectedStatus?.includes(status) ?? false}\n        text={getProtocolStatusLabel(status, t)}\n        onCheckPressed={() => onStatusChange(status)}\n      /></Flex>;\n    });\n  }, [selectedStatus, onStatusChange, t]);\n  const versionFilterOptions = useMemo(() => {\n    return PROTOCOL_VERSIONS.map((version) => <LabeledCheckbox\n      key={`PositionsHeader-version-${version}`}\n      py=\"$spacing4\"\n      hoverStyle={{ opacity: 0.8, backgroundColor: \"unset\" }}\n      checkboxPosition=\"end\"\n      checked={selectedVersions?.includes(version) ?? false}\n      text={getProtocolVersionLabel(version)}\n      onCheckPressed={() => onVersionChange(version)}\n    />);\n  }, [selectedVersions, onVersionChange]);\n  const createOptions = useMemo(\n    () => PROTOCOL_VERSIONS.map((version) => {\n      const protocolVersionLabel = getProtocolVersionLabel(version);\n      return <Flex\n        key={`PositionsHeader-create-${protocolVersionLabel}`}\n        p=\"$spacing8\"\n        {...ClickableTamaguiStyle}\n        onPress={() => {\n          navigate(`/positions/create/${protocolVersionLabel}`);\n        }}\n      ><Text variant=\"body2\"><Trans i18nKey=\"position.new.protocol\" values={{ protocol: protocolVersionLabel }} /></Text></Flex>;\n    }),\n    [navigate]\n  );\n  const [createDropdownOpen, setCreateDropdownOpen] = useState(false);\n  const [protocolDropdownOpen, setProtocolDropdownOpen] = useState(false);\n  const [statusDropdownOpen, setStatusDropdownOpen] = useState(false);\n  return <Flex gap={16}><Text variant=\"heading3\">{t(\"pool.positions.title\")}</Text><Flex gap=\"$gap8\" row $sm={{ flexDirection: \"column\" }}><Flex gap=\"$spacing1\" row><Flex\n    row\n    height=\"100%\"\n    gap=\"$gap8\"\n    px=\"$padding16\"\n    paddingRight=\"$padding10\"\n    paddingLeft=\"$padding10\"\n    backgroundColor=\"$neutral1\"\n    borderRadius=\"$rounded16\"\n    alignItems=\"center\"\n    $sm={{ justifyContent: \"center\" }}\n    justifyContent=\"flex-start\"\n    flexGrow={1}\n    {...ClickableTamaguiStyle}\n    onPress={() => {\n      navigate(\"/positions/create/v3\");\n    }}\n  ><Plus size={20} color=\"$surface1\" /><Text padding=\"5px\" color=\"$surface1\" variant=\"buttonLabel3\">{t(\"common.new\")}</Text></Flex>{\n    /* <DropdownSelector\n      containerStyle={{ width: 'auto' }}\n      menuLabel={\n        <Flex\n          borderTopRightRadius=\"$rounded16\"\n          borderBottomRightRadius=\"$rounded16\"\n          backgroundColor=\"$neutral1\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          p=\"$padding8\"\n          {...ClickableTamaguiStyle}\n        >\n          <RotatableChevron direction=\"down\" height={20} width={20} color=\"$surface1\" />\n        </Flex>\n      }\n      buttonStyle={{\n        borderWidth: 0,\n        p: 0,\n      }}\n      dropdownStyle={{ width: 160 }}\n      hideChevron={true}\n      isOpen={createDropdownOpen}\n      toggleOpen={() => {\n        setCreateDropdownOpen((prev) => !prev)\n      }}\n      alignRight={media.sm}\n    >\n      {createOptions}\n    </DropdownSelector> */\n  }</Flex>{showFilters && <Flex row alignItems=\"center\" shrink height=\"100%\" gap=\"$gap4\"><DropdownSelector\n    isOpen={protocolDropdownOpen}\n    toggleOpen={() => {\n      setProtocolDropdownOpen((prev) => !prev);\n    }}\n    menuLabel={<Text variant=\"buttonLabel3\">{t(\"common.status\")}</Text>}\n    dropdownStyle={{ width: 240 }}\n    buttonStyle={StyledDropdownButton}\n  >{statusFilterOptions}</DropdownSelector>{\n    /* <DropdownSelector\n      isOpen={statusDropdownOpen}\n      toggleOpen={() => setStatusDropdownOpen((prev) => !prev)}\n      menuLabel={<Text variant=\"buttonLabel3\">{t('common.protocol')}</Text>}\n      dropdownStyle={{ width: 160 }}\n      buttonStyle={StyledDropdownButton}\n    >\n      {versionFilterOptions}\n    </DropdownSelector> */\n  }<Flex\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    backgroundColor=\"$surface3\"\n    borderRadius=\"$rounded16\"\n    px=\"$padding12\"\n    height=\"100%\"\n    {...ClickableTamaguiStyle}\n  ><NetworkFilter\n    includeAllNetworks\n    selectedChain={selectedChain}\n    onPressChain={onChainChange}\n    chainIds={chains}\n    styles={{\n      buttonPaddingY: \"$spacing8\"\n    }}\n  /></Flex></Flex>}</Flex></Flex>;\n}\n","\"use strict\";\nimport { PositionStatus, ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport tokenLogo from \"assets/images/token-logo.png\";\nimport { ExpandoRow } from \"components/AccountDrawer/MiniPortfolio/ExpandoRow\";\nimport { useAccountDrawer } from \"components/AccountDrawer/MiniPortfolio/hooks\";\nimport { Pool as PoolIcon } from \"components/Icons/Pool\";\nimport { LiquidityPositionCard, LiquidityPositionCardLoader } from \"components/Liquidity/LiquidityPositionCard\";\nimport { LpIncentiveClaimModal } from \"components/Liquidity/LpIncentiveClaimModal\";\nimport { getPositionUrl, parseRestPosition } from \"components/Liquidity/utils\";\nimport { TopPoolTable, sortAscendingAtom, sortMethodAtom } from \"components/Pools/PoolTable/PoolTable\";\nimport { OrderDirection } from \"graphql/data/util\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useLpIncentives } from \"hooks/useLpIncentives\";\nimport { atom, useAtom } from \"jotai\";\nimport { useAtomValue, useResetAtom } from \"jotai/utils\";\nimport { PositionsHeader } from \"pages/Pool/Positions/PositionsHeader\";\nimport { ExternalArrowLink } from \"pages/Pool/Positions/shared\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTopPools } from \"state/explore/topPools\";\nimport { usePendingLPTransactionsChangeListener } from \"state/transactions/hooks\";\nimport { useRequestPositionsForSavedPairs } from \"state/user/hooks\";\nimport { ClickableTamaguiStyle } from \"theme/components/styles\";\nimport { Anchor, Button, Flex, Text, useSporeColors } from \"ui/src\";\nimport { CloseIconWithHover } from \"ui/src/components/icons/CloseIconWithHover\";\nimport { InfoCircleFilled } from \"ui/src/components/icons/InfoCircleFilled\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { ALL_NETWORKS_ARG } from \"uniswap/src/data/rest/base\";\nimport { useExploreStatsQuery } from \"uniswap/src/data/rest/exploreStats\";\nimport { useGetPositionsInfiniteQuery } from \"uniswap/src/data/rest/getPositions\";\nimport { useEnabledChains } from \"uniswap/src/features/chains/hooks/useEnabledChains\";\nimport { FeatureFlags } from \"uniswap/src/features/gating/flags\";\nimport { useFeatureFlag } from \"uniswap/src/features/gating/hooks\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { InterfacePageNameLocal, UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { usePositionVisibilityCheck } from \"uniswap/src/features/visibility/hooks/usePositionVisibilityCheck\";\nconst PAGE_SIZE = 25;\nfunction EmptyPositionsView({ chainId, isConnected }) {\n  const colors = useSporeColors();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const accountDrawer = useAccountDrawer();\n  const sortMethod = useAtomValue(sortMethodAtom);\n  const sortAscending = useAtomValue(sortAscendingAtom);\n  const resetSortMethod = useResetAtom(sortMethodAtom);\n  const resetSortAscending = useResetAtom(sortAscendingAtom);\n  useEffect(() => {\n    resetSortMethod();\n    resetSortAscending();\n  }, [resetSortAscending, resetSortMethod]);\n  const {\n    data: exploreStatsData,\n    isLoading: exploreStatsLoading,\n    error: exploreStatsError\n  } = useExploreStatsQuery({\n    chainId: chainId ? chainId.toString() : ALL_NETWORKS_ARG\n  });\n  const { topPools } = useTopPools(\n    { data: exploreStatsData, isLoading: exploreStatsLoading, isError: !!exploreStatsError },\n    {\n      sortBy: sortMethod,\n      sortDirection: sortAscending ? OrderDirection.Asc : OrderDirection.Desc\n    }\n  );\n  return <Flex gap=\"$spacing32\"><Flex\n    row\n    alignItems=\"center\"\n    justifyContent=\"space-between\"\n    borderRadius=\"$rounded20\"\n    borderColor=\"$surface3\"\n    borderWidth=\"$spacing1\"\n    borderStyle=\"solid\"\n    p=\"$padding16\"\n    overflow=\"hidden\"\n    cursor={isConnected ? \"auto\" : \"pointer\"}\n    onPress={isConnected ? void 0 : () => {\n      accountDrawer.toggle();\n    }}\n    $md={{ row: false, gap: \"$gap16\", alignItems: \"flex-start\" }}\n  ><Flex alignItems=\"center\" row gap=\"$gap8\"><Flex p=\"$padding8\" borderRadius=\"$rounded12\" backgroundColor=\"$accent2\"><PoolIcon width={iconSizes.icon24} height={iconSizes.icon24} color={colors.accent1.val} /></Flex><Flex shrink><Text variant=\"subheading2\">{isConnected ? t(\"pool.openPosition\") : t(\"positions.welcome\")}</Text><Text variant=\"body2\" color=\"$neutral2\">{isConnected ? t(\"pool.openPosition.cta\") : t(\"positions.welcome.connect\")}</Text></Flex></Flex>{isConnected && <Flex centered row $md={{ width: \"100%\" }}><Button size=\"small\" emphasis=\"secondary\" onPress={() => navigate(\"/explore/pools\")}>{t(\"pools.explore\")}</Button></Flex>}</Flex><Flex gap=\"$gap24\"><Text variant=\"subheading1\"><Trans i18nKey=\"pool.top.tvl\" /></Text><TopPoolTable\n    topPoolData={{ topPools, isLoading: exploreStatsLoading, isError: !!exploreStatsError }}\n    pageSize={10}\n    staticSize\n    forcePinning\n  /><ExternalArrowLink href=\"/explore/pools\" openInNewTab={false}>{t(\"explore.more.pools\")}</ExternalArrowLink></Flex></Flex>;\n}\nfunction LearnMoreTile({ img, text, link }) {\n  return <Anchor\n    href={link}\n    textDecorationLine=\"none\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    {...ClickableTamaguiStyle}\n    hoverStyle={{ backgroundColor: \"$surface1Hovered\", borderColor: \"$surface3Hovered\" }}\n  ><Flex\n    row\n    width={344}\n    borderRadius=\"$rounded20\"\n    borderColor=\"$surface3\"\n    borderWidth=\"$spacing1\"\n    borderStyle=\"solid\"\n    alignItems=\"center\"\n    gap=\"$gap16\"\n    overflow=\"hidden\"\n  ><img src={img} style={{ objectFit: \"cover\", width: \"72px\", height: \"72px\" }} /><Text variant=\"subheading2\">{text}</Text></Flex></Anchor>;\n}\nconst chainFilterAtom = atom(null);\nconst versionFilterAtom = atom([ProtocolVersion.V4, ProtocolVersion.V3, ProtocolVersion.V2]);\nconst statusFilterAtom = atom([PositionStatus.IN_RANGE, PositionStatus.OUT_OF_RANGE]);\nexport default function Pool() {\n  const { t } = useTranslation();\n  const isLPIncentivesEnabled = useFeatureFlag(FeatureFlags.LpIncentives);\n  const [chainFilter, setChainFilter] = useAtom(chainFilterAtom);\n  const { chains: currentModeChains } = useEnabledChains();\n  const [versionFilter, setVersionFilter] = useAtom(versionFilterAtom);\n  const [statusFilter, setStatusFilter] = useAtom(statusFilterAtom);\n  const [closedCTADismissed, setClosedCTADismissed] = useState(false);\n  const account = useAccount();\n  const { address, isConnected } = account;\n  const isPositionVisible = usePositionVisibilityCheck();\n  const [showHiddenPositions, setShowHiddenPositions] = useState(false);\n  const {\n    isPendingTransaction,\n    isModalOpen,\n    tokenRewards,\n    openModal,\n    closeModal,\n    setTokenRewards,\n    onTransactionSuccess,\n    hasCollectedRewards\n  } = useLpIncentives();\n  const { data, isPlaceholderData, refetch, isLoading, fetchNextPage, hasNextPage, isFetching } = useGetPositionsInfiniteQuery(\n    {\n      address,\n      chainIds: chainFilter ? [chainFilter] : currentModeChains,\n      positionStatuses: statusFilter,\n      protocolVersions: versionFilter,\n      pageSize: PAGE_SIZE,\n      pageToken: \"\",\n      includeHidden: true\n    },\n    !isConnected\n  );\n  const loadedPositions = useMemo(() => {\n    return data?.pages.flatMap((positionsResponse) => positionsResponse.positions) || [];\n  }, [data]);\n  const savedPositions = useRequestPositionsForSavedPairs();\n  const isLoadingPositions = !!account.address && (isLoading || !data);\n  const combinedPositions = useMemo(() => {\n    return [\n      ...loadedPositions,\n      ...savedPositions.filter((position) => {\n        const matchesChain = !chainFilter || position.data?.position?.chainId === chainFilter;\n        const matchesStatus = position.data?.position?.status && statusFilter.includes(position.data?.position?.status);\n        const matchesVersion = position.data?.position?.protocolVersion && versionFilter.includes(position.data?.position?.protocolVersion);\n        return matchesChain && matchesStatus && matchesVersion;\n      }).map((p) => p.data?.position) ?? []\n    ].map(parseRestPosition).filter((position) => !!position).reduce((unique, position) => {\n      const positionId = `${position.poolId}-${position.tokenId}-${position.chainId}`;\n      const exists = unique.some((p) => `${p.poolId}-${p.tokenId}-${p.chainId}` === positionId);\n      if (!exists) {\n        unique.push(position);\n      }\n      return unique;\n    }, []);\n  }, [loadedPositions, savedPositions, chainFilter, statusFilter, versionFilter]);\n  const { visiblePositions, hiddenPositions } = useMemo(() => {\n    const visiblePositions2 = [];\n    const hiddenPositions2 = [];\n    combinedPositions.forEach((position) => {\n      const isVisible = isPositionVisible({\n        poolId: position.poolId,\n        tokenId: position.tokenId,\n        chainId: position.chainId,\n        isFlaggedSpam: position.isHidden\n      });\n      if (isVisible) {\n        visiblePositions2.push(position);\n      } else {\n        hiddenPositions2.push(position);\n      }\n    });\n    return { visiblePositions: visiblePositions2, hiddenPositions: hiddenPositions2 };\n  }, [combinedPositions, isPositionVisible]);\n  usePendingLPTransactionsChangeListener(refetch);\n  const loadMorePositions = () => {\n    if (hasNextPage && !isFetching) {\n      fetchNextPage();\n    }\n  };\n  return <Trace logImpression page={InterfacePageNameLocal.Positions}><Flex\n    row\n    justifyContent=\"space-between\"\n    $xl={{ flexDirection: \"column\", gap: \"$gap16\" }}\n    width=\"100%\"\n    gap={20}\n    py=\"$spacing24\"\n    px=\"$spacing40\"\n    $lg={{ px: \"$spacing20\" }}\n  ><Flex grow shrink gap=\"$spacing24\" $xl={{ maxWidth: \"100%\" }}>{\n    /* {isLPIncentivesEnabled && (\n      <LpIncentiveRewardsCard\n        walletAddress={account.address}\n        onCollectRewards={() => {\n          sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsButtonClicked)\n          openModal()\n        }}\n        setTokenRewards={setTokenRewards}\n        initialHasCollectedRewards={hasCollectedRewards}\n      />\n    )} */\n  }<Flex row justifyContent=\"space-between\" alignItems=\"center\" mt={isLPIncentivesEnabled ? \"$spacing28\" : 0}><PositionsHeader\n    showFilters={account.isConnected}\n    selectedChain={chainFilter}\n    selectedVersions={versionFilter}\n    selectedStatus={statusFilter}\n    onChainChange={(selectedChain) => {\n      setChainFilter(selectedChain ?? null);\n    }}\n    onVersionChange={(toggledVersion) => {\n      setVersionFilter((prevVersionFilter) => {\n        if (prevVersionFilter.includes(toggledVersion)) {\n          return prevVersionFilter.filter((v) => v !== toggledVersion);\n        } else {\n          return [...prevVersionFilter, toggledVersion];\n        }\n      });\n    }}\n    onStatusChange={(toggledStatus) => {\n      setStatusFilter((prevStatusFilter) => {\n        if (prevStatusFilter?.includes(toggledStatus)) {\n          return prevStatusFilter.filter((s) => s !== toggledStatus);\n        } else {\n          return [...prevStatusFilter, toggledStatus];\n        }\n      });\n    }}\n  /></Flex>{!isLoadingPositions ? combinedPositions.length > 0 ? <Flex gap=\"$gap16\" mb=\"$spacing16\" opacity={isPlaceholderData ? 0.6 : 1}>{visiblePositions.map((position) => <Link\n    key={`${position.poolId}-${position.tokenId}-${position.chainId}`}\n    style={{ textDecoration: \"none\" }}\n    to={getPositionUrl(position)}\n  ><LiquidityPositionCard showVisibilityOption liquidityPosition={position} showMigrateButton /></Link>)}<HiddenPositions\n    showHiddenPositions={showHiddenPositions}\n    setShowHiddenPositions={setShowHiddenPositions}\n    hiddenPositions={hiddenPositions}\n  /></Flex> : <EmptyPositionsView chainId={chainFilter} isConnected={isConnected} /> : <Flex gap=\"$gap16\">{Array.from({ length: 5 }, (_, index) => <LiquidityPositionCardLoader key={index} />)}</Flex>}{hasNextPage && <Flex mx=\"auto\"><Button emphasis=\"tertiary\" size=\"small\" onPress={loadMorePositions} isDisabled={isFetching}>{t(\"common.loadMore\")}</Button></Flex>}{!statusFilter.includes(PositionStatus.CLOSED) && !closedCTADismissed && account.address && <Flex\n    borderWidth=\"$spacing1\"\n    borderColor=\"$surface3\"\n    borderRadius=\"$rounded12\"\n    mb=\"$spacing24\"\n    p=\"$padding12\"\n    gap=\"$gap12\"\n    row\n    centered\n  ><Flex height=\"100%\"><InfoCircleFilled color=\"$neutral2\" size=\"$icon.20\" /></Flex><Flex grow flexBasis={0}><Text variant=\"body3\" color=\"$neutral1\"><Trans i18nKey=\"pool.closedCTA.title\" /></Text><Text variant=\"body3\" color=\"$neutral2\"><Trans i18nKey=\"pool.closedCTA.description\" /></Text></Flex><CloseIconWithHover onClose={() => setClosedCTADismissed(true)} size=\"$icon.20\" /></Flex>}{\n    /* <Flex row centered $sm={{ flexDirection: 'column', alignItems: 'flex-start' }} mb=\"$spacing24\" gap=\"$gap4\">\n      <Text variant=\"body3\" color=\"$neutral2\">\n        {t('pool.import.link.description')}\n      </Text>\n      <Anchor href=\"/pools/v2/find\" textDecorationLine=\"none\">\n        <Text variant=\"body3\" color=\"$neutral1\" {...ClickableTamaguiStyle}>\n          {t('pool.import.positions.v2')}\n        </Text>\n      </Anchor>\n    </Flex> */\n  }</Flex>{\n    /* <Flex gap=\"$gap32\">\n      <TopPools chainId={chainFilter} />\n      <Flex gap=\"$gap20\" mb=\"$spacing24\">\n        <Text variant=\"subheading1\">{t('liquidity.learnMoreLabel')}</Text>\n        <Flex gap=\"$gap12\">\n          <LearnMoreTile\n            img={PROVIDE_LIQUIDITY}\n            text={t('liquidity.provideOnProtocols')}\n            link={uniswapUrls.helpArticleUrls.providingLiquidityInfo}\n          />\n          <LearnMoreTile img={V4_HOOK} text={t('liquidity.hooks')} link={uniswapUrls.helpArticleUrls.v4HooksInfo} />\n        </Flex>\n        <ExternalArrowLink href={uniswapUrls.helpArticleUrls.positionsLearnMore}>\n          {t('common.button.learn')}\n        </ExternalArrowLink>\n      </Flex>\n    </Flex> */\n  }</Flex>{isLPIncentivesEnabled && <LpIncentiveClaimModal\n    isOpen={isModalOpen}\n    onClose={() => closeModal()}\n    onSuccess={() => {\n      sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsSuccess, {\n        token_rewards: tokenRewards\n      });\n      onTransactionSuccess();\n    }}\n    tokenRewards={tokenRewards}\n    isPendingTransaction={isPendingTransaction}\n    iconUrl={tokenLogo}\n  />}</Trace>;\n}\nfunction HiddenPositions({ showHiddenPositions, setShowHiddenPositions, hiddenPositions }) {\n  const { t } = useTranslation();\n  return <ExpandoRow\n    isExpanded={showHiddenPositions}\n    toggle={() => setShowHiddenPositions(!showHiddenPositions)}\n    numItems={hiddenPositions.length}\n    title={t(\"common.hidden\")}\n    enableOverflow\n  ><Flex gap=\"$gap16\">{hiddenPositions.map((position) => <Link\n    key={`${position.poolId}-${position.tokenId}-${position.chainId}`}\n    style={{ textDecoration: \"none\" }}\n    to={getPositionUrl(position)}\n  ><LiquidityPositionCard showVisibilityOption liquidityPosition={position} isVisible={false} /></Link>)}</Flex></ExpandoRow>;\n}\n"],"names":["_cn3","_cn2","_cn","DialogV2","isOpen","onClose","icon","title","subtext","learnMoreUrl","modalName","primaryButtonText","primaryButtonOnClick","primaryButtonVariant","primaryButtonEmphasis","isPrimaryButtonLoading","secondaryButtonText","secondaryButtonOnClick","secondaryButtonVariant","secondaryButtonEmphasis","alignment","isExtension","children","displayHelpCTA","Modal","isModalOpen","name","GetHelpHeader","closeModal","div","className","Text","variant","color","mt","textAlign","LearnMoreLink","url","textColor","textVariant","Button","emphasis","minHeight","onPress","loading","useLpIncentivesClaim","dispatch","useDispatch","selectChain","useSelectChain","useCallback","params","wrappedSelectChain","chainId","lpIncentivesClaimSaga","actions","trigger","useLpIncentivesClaimData","walletAddress","tokens","distributor","data","fetchClaimLpIncentiveRewards","simulateTransaction","error","Error","Distributor","Distributor2","LpIncentiveClaimModal","onSuccess","token","LP_INCENTIVES_REWARD_TOKEN","tokenRewards","isPendingTransaction","iconUrl","setError","useState","t","useTranslation","formattedTokenRewards","useMemo","formatTokenAmount","decimals","useFormattedTokenRewards","mutate","claim","isPending","onError","account","useAccount","address","lpIncentivesClaim","lpIncentivesClaimData","useMutation","mutationFn","MERKL","sendAnalyticsEvent","UniswapEventName","LpIncentiveCollectRewardsErrorThrown","message","Promise","resolve","reject","type","AccountType","SignerMnemonic","claimData","tokenAddress","onFailure","error2","setCurrentStep","useLpIncentiveClaimMutation","didUserReject","logger","tags","file","function","handleClaim","useEvent","skipAnalytics","LpIncentiveCollectRewardsRetry","useEffect","buttonConfig","isLoading","onClaim","onClick","DialogButtonType","Accent","useLpIncentiveClaimButtonConfig","Image","src","width","iconSizes","icon48","height","objectFit","symbol","InlineWarningCard","severity","WarningSeverity","Medium","description","hideCtaIcon","ModalName","lpIncentivesLastClaimedAtom","atomWithStorage","useLpIncentives","setIsPendingTransaction","pendingTransactions","usePendingTransactions","hasPendingClaim","some","tx","info","TransactionType","LP_INCENTIVES_CLAIM_REWARDS","useLpIncentivesTransactionState","setIsModalOpen","setTokenRewards","hasCollectedRewards","setHasCollectedRewards","setLastClaimed","useAtom","refetch","input","enabled","useQuery","getRewards","transport","uniswapGetTransport","useGetPoolsRewards","chainIds","UniverseChainId","Mainnet","reload","onTransactionSuccess","rewardsData","rewardsAmount","totalUnclaimedAmountUni","timestamp","Date","now","amount","openModal","_cn5","_cn4","StyledDropdownButton","borderRadius","py","px","backgroundColor","borderWidth","hoverStyle","ClickableTamaguiStyle","PROTOCOL_VERSIONS","ProtocolVersion","V4","V3","V2","PositionsHeader","showFilters","selectedChain","selectedVersions","selectedStatus","onChainChange","onVersionChange","onStatusChange","chains","useEnabledChains","navigate","useNavigate","statusFilterOptions","PositionStatus","IN_RANGE","OUT_OF_RANGE","CLOSED","map","status","config","lpStatusConfig","StatusIndicatorCircle","LabeledCheckbox","size","opacity","containerStyle","flex","checkboxPosition","checked","includes","text","getProtocolStatusLabel","onCheckPressed","createDropdownOpen","setCreateDropdownOpen","version","getProtocolVersionLabel","protocolVersionLabel","Flex","p","Trans","i18nKey","values","protocol","protocolDropdownOpen","setProtocolDropdownOpen","statusDropdownOpen","setStatusDropdownOpen","row","gap","paddingRight","paddingLeft","alignItems","$sm","justifyContent","flexGrow","Plus","padding","DropdownSelector","toggleOpen","prev","menuLabel","dropdownStyle","buttonStyle","NetworkFilter","includeAllNetworks","onPressChain","styles","buttonPaddingY","_cn26","_cn25","_cn24","_cn23","_cn22","_cn21","_cn20","_cn19","_cn18","_cn17","_cn16","_cn15","_cn14","_cn12","_cn11","_cn10","_cn9","_cn8","_cn7","_cn6","PAGE_SIZE","EmptyPositionsView","isConnected","colors","useSporeColors","accountDrawer","useAccountDrawer","sortMethod","useAtomValue","sortMethodAtom","sortAscending","sortAscendingAtom","resetSortMethod","useResetAtom","resetSortAscending","exploreStatsData","exploreStatsLoading","exploreStatsError","useExploreStatsQuery","toString","ALL_NETWORKS_ARG","topPools","useTopPools","isError","sortBy","sortDirection","OrderDirection","Asc","Desc","toggle","concatClassName","PoolIcon","icon24","accent1","val","TopPoolTable","topPoolData","pageSize","staticSize","forcePinning","ExternalArrowLink","href","openInNewTab","chainFilterAtom","atom","versionFilterAtom","statusFilterAtom","Pool","isLPIncentivesEnabled","useFeatureFlag","FeatureFlags","LpIncentives","chainFilter","setChainFilter","currentModeChains","versionFilter","setVersionFilter","statusFilter","setStatusFilter","closedCTADismissed","setClosedCTADismissed","isPositionVisible","usePositionVisibilityCheck","showHiddenPositions","setShowHiddenPositions","isPlaceholderData","fetchNextPage","hasNextPage","isFetching","useGetPositionsInfiniteQuery","positionStatuses","protocolVersions","pageToken","includeHidden","loadedPositions","pages","flatMap","positionsResponse","positions","savedPositions","useRequestPositionsForSavedPairs","isLoadingPositions","combinedPositions","filter","position","matchesChain","matchesStatus","matchesVersion","protocolVersion","parseRestPosition","reduce","unique","positionId","poolId","tokenId","push","visiblePositions","hiddenPositions","visiblePositions2","hiddenPositions2","forEach","isFlaggedSpam","isHidden","usePendingLPTransactionsChangeListener","Trace","logImpression","page","InterfacePageNameLocal","Positions","toggledVersion","prevVersionFilter","v","toggledStatus","prevStatusFilter","s","Array","from","length","_","index","LiquidityPositionCardLoader","Link","style","textDecoration","to","getPositionUrl","LiquidityPositionCard","showVisibilityOption","liquidityPosition","showMigrateButton","HiddenPositions","loadMorePositions","isDisabled","InfoCircleFilled","CloseIconWithHover","LpIncentiveCollectRewardsSuccess","token_rewards","tokenLogo","ExpandoRow","isExpanded","numItems","enableOverflow","isVisible"],"sourceRoot":""}