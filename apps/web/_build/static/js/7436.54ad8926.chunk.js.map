{"version":3,"file":"static/js/7436.54ad8926.chunk.js","mappings":"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","sources":["webpack://@uniswap/interface/./src/pages/ExtensionPasskeyAuthPopUp/index.tsx?42c3","../../../packages/uniswap/src/extension/messagePassing/messageTypes.ts","../../../packages/uniswap/src/extension/messagePassing/types/requests.ts","webpack://@uniswap/interface/./src/pages/ExtensionPasskeyAuthPopUp/index.tsx?948c","../../../packages/uniswap/src/extension/messagePassing/platform.ts","pages/ExtensionPasskeyAuthPopUp/useExternallyConnectableExtensionId.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { z } from \"zod\";\nexport const MessageSchema = z.object({});\n","import { MessageSchema } from \"uniswap/src/extension/messagePassing/messageTypes\";\nimport { z } from \"zod\";\nexport var ExtensionToInterfaceRequestType = /* @__PURE__ */ ((ExtensionToInterfaceRequestType2) => {\n  ExtensionToInterfaceRequestType2[\"PasskeyRequest\"] = \"PasskeyRequest\";\n  return ExtensionToInterfaceRequestType2;\n})(ExtensionToInterfaceRequestType || {});\nexport const PasskeyRequestSchema = MessageSchema.extend({\n  type: z.literal(\"PasskeyRequest\" /* PasskeyRequest */),\n  requestId: z.string(),\n  challengeJson: z.string()\n});\nexport var InterfaceToExtensionRequestType = /* @__PURE__ */ ((InterfaceToExtensionRequestType2) => {\n  InterfaceToExtensionRequestType2[\"PasskeySignInFlowOpened\"] = \"PasskeySignInFlowOpened\";\n  InterfaceToExtensionRequestType2[\"PasskeyCredentialRetrieved\"] = \"PasskeyCredentialRetrieved\";\n  InterfaceToExtensionRequestType2[\"PasskeyCredentialError\"] = \"PasskeyCredentialError\";\n  return InterfaceToExtensionRequestType2;\n})(InterfaceToExtensionRequestType || {});\nexport const PasskeySignInFlowOpenedSchema = MessageSchema.extend({\n  type: z.literal(\"PasskeySignInFlowOpened\" /* PasskeySignInFlowOpened */),\n  requestId: z.string()\n});\nexport const PasskeyCredentialRetrievedSchema = MessageSchema.extend({\n  type: z.literal(\"PasskeyCredentialRetrieved\" /* PasskeyCredentialRetrieved */),\n  requestId: z.string(),\n  credential: z.string()\n});\nexport const PasskeyCredentialErrorSchema = MessageSchema.extend({\n  type: z.literal(\"PasskeyCredentialError\" /* PasskeyCredentialError */),\n  requestId: z.string(),\n  error: z.string()\n});\n","\"use strict\";\nimport { EnvelopeHeartIcon } from \"components/Icons/EnvelopeHeart\";\nimport { useExternallyConnectableExtensionId } from \"pages/ExtensionPasskeyAuthPopUp/useExternallyConnectableExtensionId\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Anchor, Button, Flex, SpinningLoader, Text } from \"ui/src\";\nimport { Passkey } from \"ui/src/components/icons/Passkey\";\nimport { UniswapLogo } from \"ui/src/components/icons/UniswapLogo\";\nimport { uniswapUrls } from \"uniswap/src/constants/urls\";\nimport { parseMessage } from \"uniswap/src/extension/messagePassing/platform\";\nimport {\n  InterfaceToExtensionRequestType,\n  PasskeyRequestSchema\n} from \"uniswap/src/extension/messagePassing/types/requests\";\nimport { authenticatePasskey } from \"uniswap/src/features/passkey/passkey\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { ONE_SECOND_MS } from \"utilities/src/time/time\";\nimport { useTimeout } from \"utilities/src/time/timing\";\nconst EXTENSION_REFERRER_VERIFICATION_TIMEOUT = ONE_SECOND_MS * 3;\nvar ReferrerVerification = /* @__PURE__ */ ((ReferrerVerification2) => {\n  ReferrerVerification2[\"Verifying\"] = \"Verifying\";\n  ReferrerVerification2[\"Allowed\"] = \"Allowed\";\n  ReferrerVerification2[\"Denied\"] = \"Denied\";\n  return ReferrerVerification2;\n})(ReferrerVerification || {});\nexport default function ExtensionPasskeyAuthPopUp() {\n  const { t } = useTranslation();\n  const extensionId = useExternallyConnectableExtensionId();\n  const [signInAttemptStatus, setSignInAttemptStatus] = useState(\"Verifying\" /* Verifying */);\n  const [passkeyRequestData, setPasskeyRequestData] = useState(null);\n  const [searchParams] = useSearchParams();\n  useEffect(() => {\n    if (!chrome?.runtime) {\n      logger.debug(\"ExtensionPasskeySignIn.tsx\", \"useEffect\", \"No `chrome.runtime` found\");\n      setSignInAttemptStatus(\"Denied\" /* Denied */);\n      return;\n    }\n    const requestId = searchParams.get(\"request_id\");\n    if (!requestId) {\n      logger.debug(\"ExtensionPasskeySignIn.tsx\", \"useEffect\", \"No `request_id` found\");\n      setSignInAttemptStatus(\"Denied\" /* Denied */);\n      return;\n    }\n    const handleMessageRequestPasskey = async (message) => {\n      const parsedMessage = parseMessage(message, PasskeyRequestSchema);\n      if (!parsedMessage) {\n        setSignInAttemptStatus(\"Denied\" /* Denied */);\n        return;\n      }\n      logger.debug(\n        \"ExtensionPasskeySignIn.tsx\",\n        \"handleMessageRequestPasskey\",\n        `Message received: ${parsedMessage.type}`\n      );\n      setSignInAttemptStatus(\"Allowed\" /* Allowed */);\n      setPasskeyRequestData(parsedMessage);\n    };\n    logger.debug(\n      \"ExtensionPasskeySignIn.tsx\",\n      \"useEffect\",\n      `Sending PasskeySignInFlowOpened message to extension ID ${extensionId}`\n    );\n    chrome.runtime.sendMessage(\n      extensionId,\n      {\n        type: InterfaceToExtensionRequestType.PasskeySignInFlowOpened,\n        requestId\n      },\n      handleMessageRequestPasskey\n    );\n  }, []);\n  const onPressSignIn = async () => {\n    if (signInAttemptStatus !== \"Allowed\" /* Allowed */ || !passkeyRequestData) {\n      logger.debug(\"ExtensionPasskeySignIn.tsx\", \"onPressSignIn\", \"Invalid state\", {\n        signInAttemptStatus,\n        passkeyRequestData\n      });\n      return;\n    }\n    try {\n      const credential = await authenticatePasskey(passkeyRequestData.challengeJson);\n      if (!credential) {\n        logger.debug(\n          \"ExtensionPasskeySignIn.tsx\",\n          \"onPressSignIn\",\n          `Sending PasskeyCredentialError message to extension ID ${extensionId}`\n        );\n        chrome.runtime.sendMessage(extensionId, {\n          type: InterfaceToExtensionRequestType.PasskeyCredentialError,\n          requestId: passkeyRequestData.requestId,\n          error: \"No credential returned\"\n        });\n        return;\n      }\n      logger.debug(\n        \"ExtensionPasskeySignIn.tsx\",\n        \"onPressSignIn\",\n        `Sending PasskeyCredentialRetrieved message to extension ID ${extensionId}`\n      );\n      chrome.runtime.sendMessage(extensionId, {\n        type: InterfaceToExtensionRequestType.PasskeyCredentialRetrieved,\n        requestId: passkeyRequestData.requestId,\n        credential\n      });\n    } catch (error) {\n      logger.error(error, {\n        tags: {\n          file: \"ExtensionPasskeySignIn/index.tsx\",\n          function: \"onPressSignIn\"\n        }\n      });\n    }\n  };\n  useTimeout(() => {\n    setSignInAttemptStatus((currentStatus) => {\n      return currentStatus === \"Verifying\" /* Verifying */ ? \"Denied\" /* Denied */ : currentStatus;\n    });\n  }, EXTENSION_REFERRER_VERIFICATION_TIMEOUT);\n  return (\n    // TODO(WALL-6386): add InterfacePageName.EXTENSION_PASSKEY_SIGN_IN_PAGE to @uniswap/analytics-events\n    <Trace logImpression page=\"extension-passkey-sign-in-page\"><Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" minHeight=\"100vh\"><Flex width=\"400px\" padding=\"$spacing16\" flexDirection=\"column\" gap=\"$spacing16\"><Flex row justifyContent=\"flex-end\"><Flex row width=\"fit-content\"><Anchor target=\"_blank\" rel=\"noreferrer\" href={uniswapUrls.helpArticleUrls.passkeysInfo}><Button icon={<EnvelopeHeartIcon />} size=\"xxsmall\" emphasis=\"secondary\">{t(\"common.getHelp.button\")}</Button></Anchor></Flex></Flex><Flex alignItems=\"center\"><UniswapLogo size=\"$icon.40\" color=\"$accent1\" /></Flex>{signInAttemptStatus === \"Denied\" /* Denied */ ? <Flex alignItems=\"center\" px=\"$spacing60\"><Text variant=\"body3\" textAlign=\"center\">{\n      /* TODO(6376): confirm what we want this to say */\n    }{t(\"extensionPasskeySignInPopUp.invalidReferrer\")}</Text></Flex> : <><Flex alignItems=\"center\"><Text variant=\"subheading1\">{t(\"nav.signIn.button\")}</Text></Flex><Flex alignItems=\"center\" px=\"$spacing60\"><Text variant=\"body3\" textAlign=\"center\">{t(\"extensionPasskeySignInPopUp.description\")}</Text></Flex><Flex row py=\"$spacing16\"><Button\n      icon={signInAttemptStatus === \"Verifying\" /* Verifying */ ? <SpinningLoader /> : <Passkey />}\n      size=\"large\"\n      variant=\"branded\"\n      onPress={onPressSignIn}\n      isDisabled={signInAttemptStatus !== \"Allowed\" /* Allowed */}\n    >{signInAttemptStatus === \"Allowed\" /* Allowed */ ? t(\"nav.signIn.button\") : void 0}</Button></Flex></>}</Flex></Flex></Trace>\n  );\n}\n","export function parseMessage(message, schema) {\n  try {\n    return schema.parse(message);\n  } catch (e) {\n    return void 0;\n  }\n}\n","\"use strict\";\nimport { DynamicConfigs, ExternallyConnectableExtensionConfigKey } from \"uniswap/src/features/gating/configs\";\nimport { useDynamicConfigValue } from \"uniswap/src/features/gating/hooks\";\nimport { TRUSTED_CHROME_EXTENSION_IDS } from \"utilities/src/environment/extensionId\";\nexport function useExternallyConnectableExtensionId() {\n  const extensionId = useDynamicConfigValue(\n    DynamicConfigs.ExternallyConnectableExtension,\n    ExternallyConnectableExtensionConfigKey.ExtensionId,\n    TRUSTED_CHROME_EXTENSION_IDS.prod\n  );\n  return extensionId;\n}\n"],"names":["MessageSchema","z","object","PasskeyRequestSchema","extend","type","literal","requestId","string","challengeJson","InterfaceToExtensionRequestType","InterfaceToExtensionRequestType2","credential","error","_cn7","_cn6","_cn5","_cn4","_cn3","_cn2","_cn","EXTENSION_REFERRER_VERIFICATION_TIMEOUT","ONE_SECOND_MS","ExtensionPasskeyAuthPopUp","t","useTranslation","extensionId","useExternallyConnectableExtensionId","signInAttemptStatus","setSignInAttemptStatus","useState","passkeyRequestData","setPasskeyRequestData","searchParams","useSearchParams","useEffect","chrome","runtime","logger","debug","get","handleMessageRequestPasskey","message","parsedMessage","schema","parse","e","parseMessage","sendMessage","PasskeySignInFlowOpened","onPressSignIn","authenticatePasskey","PasskeyCredentialError","PasskeyCredentialRetrieved","tags","file","function","useTimeout","currentStatus","Trace","logImpression","page","div","className","Anchor","target","rel","href","uniswapUrls","helpArticleUrls","passkeysInfo","Button","icon","EnvelopeHeartIcon","size","emphasis","UniswapLogo","color","Text","variant","textAlign","SpinningLoader","Passkey","onPress","isDisabled","useDynamicConfigValue","DynamicConfigs","ExternallyConnectableExtension","ExternallyConnectableExtensionConfigKey","ExtensionId","TRUSTED_CHROME_EXTENSION_IDS","prod"],"sourceRoot":""}