{"version":3,"file":"static/js/5850.ce420b26.chunk.js","mappings":"uJACA,SAAiB,C,gDCAjB,SAAiB,C,gDCAjB,SAAiB,C,qJCDJ,MAAAA,EAAA,iRAAAC,EAAA,mOAQN,SAASC,GAAqB,MACnCC,EAAK,WACLC,EAAU,OACVC,IAEA,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACRC,GAAqBC,EAAAA,EAAAA,UACzB,KAAM,SAACC,EAAAA,GAAcA,CAACC,OAAO,6BAA6BC,QAASR,KACnE,CAACA,IAEH,OAAO,UAACS,MAAAA,CAAIC,UAAAb,E,UAAsFI,GAAS,SAACU,EAAAA,EAAaA,CAACC,QAASX,E,UAAQ,SAACY,EAAAA,EAASA,CAACC,MAAM,YAAYC,KAAK,eAAgCX,GAAmB,SAACY,EAAAA,GAAIA,CAACC,QAAQ,QAAQC,SAAU,EAAGC,UAAU,SAASC,GAAI,G,SAAKrB,IAAeE,GAIzS,SAACQ,MAAAA,CAAIC,UAAAd,E,SAAsDQ,KAJuP,SAACiB,EAAAA,EAAgBA,CACtUC,oBAAoB,EACpBC,SAAU,CAACC,EAAAA,EAAUC,EAAAA,GACrBC,aAAcxB,EAAE,2CAEpB,C,kJCvBa,MAAAN,EAAA,6KAAAC,EAAA,6JASN,SAAS8B,GAAU,eACxBC,EAAc,kBACdC,EAAiB,YACjBC,GAAc,I,IAGwCF,EAAgDA,EAIxEG,EAL9B,MAAM,qBAAEC,IAAyBC,EAAAA,EAAAA,MAC3BF,EAAWD,GAAcI,EAAAA,EAAAA,IAAuBN,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAgBG,SAAUI,EAAAA,GAAgBC,IAAMR,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAgBG,SACtH,OAAO,UAACtB,MAAAA,CAAIC,UAAAb,E,WAAyB,UAACY,MAAAA,CAAIC,UAAAd,E,WAAM,UAACoB,EAAAA,GAAIA,CAACC,QAAQ,W,UAAYe,EAAqB,CAC7FK,MAAOT,EACPU,KAAMC,EAAAA,EAAWC,aACf,KAAKC,EAAAA,EAAAA,IAAqBV,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAUW,YAAe,SAAC1B,EAAAA,GAAIA,CAACC,QAAQ,QAAQH,MAAM,Y,SAAakB,EAAqB,CACnHK,MAAOR,EACPS,KAAMC,EAAAA,EAAWI,qBACF,SAACC,EAAAA,EAAYA,CAACb,SAAUA,EAAUhB,KAAM8B,EAAAA,EAAUC,WACrE,C,+uBCEA,MAAMC,GAA6BC,EAAAA,EAAAA,oBAAc,GAQ1C,SAASC,GAAmC,SACjDC,EAAQ,aACRC,I,IA4CoDC,EA+DlDC,EACAC,EAI8BC,EAA4FA,EA9G5H,MAAMC,GAAUC,EAAAA,EAAAA,MACTC,EAAyBC,IAA8BC,EAAAA,EAAAA,WAAS,IACjE,oBAAEC,EAAmB,cAAEC,EAAa,uBAAEP,IAA2BQ,EAAAA,EAAAA,OACjE,UAAEV,EAAS,UAAEC,IAAcU,EAAAA,EAAAA,IAA6Bb,IACxD,sBACJc,EACAC,iBAAiB,UAAEC,KACjBC,EAAAA,EAAAA,MACEC,GAAkChE,EAAAA,EAAAA,UAAQ,KAC9C,GAAK8C,GAAiBK,EAAQc,QAG9B,MAAO,CACLC,qBAAqB,EACrBC,cAAehB,EAAQc,QACvBG,QAAStB,EAAauB,gBAAgB3C,SAAS0C,QAC/CE,SAAUC,EAAAA,EAAcC,GACxBC,cAAe3B,EAAa4B,QAC7B,GACA,CAAC5B,EAAcK,EAAQc,WAExBU,KAAM5B,EACN6B,UAAWC,EACXC,MAAOC,EACPC,QAASC,IACPC,EAAAA,EAAAA,GAAwB,CAC1BC,OAAQnB,EACRoB,QAAS,CACP,6BAA8BC,EAAAA,EAAuBC,MAEvDC,UAAW,EAAIC,EAAAA,GACfC,QAASC,QAAQ1B,KAEnB,GAAIe,EAAe,CACjB,MAAMY,GAAUC,EAAAA,EAAAA,GAAuBb,EAAe,CAAE1D,aAAc,iCACtEwE,EAAAA,EAAOf,MAAMa,EAAS,CACpBG,KAAM,CACJC,KAAM,8BACNC,SAAU,cAGhB,CACA,MAAMC,GAAmBpB,GAAmBa,QAAQ3C,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAuBmD,YACrEC,GAA6BnG,EAAAA,EAAAA,UAAQ,K,IAC8BmD,EAOES,EACAA,EAatDd,EAAmCA,EAOjCA,EAoBUE,EACAC,EAjD/B,IAAKO,IAAwBV,IAAiBA,EAAa4B,WAAYvB,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAASc,WAAYL,GAAyBJ,EAAoB4C,kBAAoBtE,EAAAA,GAAgBC,IAAM6B,EAAsBwC,kBAAoBtE,EAAAA,GAAgBC,KAAOe,EAAauD,OAASvD,EAAawD,UACrR,OAEF,MAAMC,EAAkB/C,EAAoB6C,MAAQzC,EAAsB4C,SAC1E,IAAKD,EACH,OAEF,MAAME,EAAY3C,EAAYF,EAAsB8C,gBAAgB,GAAgC,QAA3B9C,EAAAA,EAAsB+C,aAAtB/C,IAAAA,OAAAA,EAAAA,EAA8B,GACjGgD,EAAY9C,EAAYF,EAAsB8C,gBAAgB,GAAgC,QAA3B9C,EAAAA,EAAsB+C,aAAtB/C,IAAAA,OAAAA,EAAAA,EAA8B,GACvG,YAAkB,IAAd6C,QAAsC,IAAdG,GAAyB9D,EAAauD,MAASvD,EAAawD,UAGjF,CACLpC,qBAAsB+B,EACtBY,cAAetC,EAAAA,EAAcC,GAC7BE,QAASoC,OAAOhE,EAAa4B,SAC7BqC,cAAe,CACbV,KAAM,CACJW,OAAQlE,EAAauB,gBAAgB3C,SAASuF,SAAWC,EAAAA,GAAepE,EAAauB,gBAAgB3C,SAASuC,QAC9GkD,OAAQrE,EAAasE,gBAAgB1F,SAASuF,SAAWC,EAAAA,GAAepE,EAAasE,gBAAgB1F,SAASuC,QAC9GoD,IAAKvE,EAAawE,QAAUR,OAAOhE,EAAawE,cAAW,EAC3DC,aAAazE,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAcyE,aAAcT,OAAOhE,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAcyE,kBAAe,GAE/Ed,UAAW3D,EAAa2D,UAAYK,OAAOhE,EAAa2D,gBAAa,EACrEG,UAAW9D,EAAa8D,UAAYE,OAAOhE,EAAa8D,gBAAa,GAEvEY,mBAAoB1E,EAAauD,KAAKC,UAAUmB,WAChDC,iBAAkB5E,EAAauD,KAAKsB,YACpCC,kBAAiD,QAA9B9E,EAAAA,EAAauD,KAAKwB,oBAAlB/E,IAAAA,OAAAA,EAAAA,EAAgC2E,WACnDK,uBAAwBhF,EAAawD,UACrCyB,eAAgBxD,EAAAA,EAAcxC,GAC9BiG,eAAgB,CACd3B,KAAM,CACJW,QAAQiB,EAAAA,EAAAA,IAAgC1B,EAAgB2B,WACxDf,QAAQc,EAAAA,EAAAA,IAAgC1B,EAAgB4B,WACxDd,IAAK5D,EAAc4D,IAAIe,UACvBC,MAAO5E,EAAc6E,KACrBf,YAAahB,EAAgBgB,aAE/Bd,YACAG,aAEF2B,oBAAqB/E,EAAoBgF,wBAAqB,EAASjC,EAAgBD,UAAUmB,WACjGgB,mBAAoBjF,EAAoBgF,wBAAqB,EAASjC,EAAgBsB,aAAaJ,WACnGiB,kBAAmBlF,EAAoBgF,wBAAqB,EAASjC,EAAgBoB,YACrFgB,aAAcnF,EAAoBgF,mBAAqBjC,EAAgBsB,aAAaJ,gBAAa,EACjGrD,QAAStB,EAAauB,gBAAgB3C,SAAS0C,QAC/CD,cAAehB,EAAQc,QACvB2E,6BAA6B5F,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAW6F,SAASpB,aAAc,IAC/DqB,6BAA6B7F,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAW4F,SAASpB,aAAc,IAC/DsB,QAASjG,EAAauB,gBAAgBwE,SAASpB,WAC/CuB,QAASlG,EAAasE,gBAAgByB,SAASpB,iBA1CjD,CA2CC,GACA,CACDjE,EACAV,EACAK,EACAS,EACAE,EACAL,EAAc4D,IAAIe,UAClB3E,EAAc6E,KACdtF,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAW6F,SACX5F,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAW4F,SACX5C,IAEIgD,EAAerF,EAAsBwC,kBAAoBtE,EAAAA,GAAgBoH,KAAOtF,EAAsBuF,eAAiBvF,EAAsBwF,aAE7IC,KAD0BnG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAwBoG,KAAKrH,QAASsH,EAAAA,EAAoBC,iCAAkCtG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAwBoG,KAAKrH,QAASsH,EAAAA,EAAoBE,uCAClI5E,IAAoBE,GAAiBW,QAAQS,IAA+B8C,GAE9HtE,KAAM+E,EACN5E,MAAO6E,EACP3E,QAAS4E,ICpJN,UAA6C,OAClDzE,KACG0E,IAEH,MAAMC,EAAW,CAACC,EAAAA,EAAmBC,WAAYC,EAAAA,GAAYC,gBAAgBC,QAAShF,GACtF,OAAOiF,EAAAA,EAAAA,GAAS,CACdN,WACAO,QAAS,eACP,IAAKlF,EACH,KAAM,CAAEmF,KAAM,uBAEhB,aAAaC,EAAAA,EAAAA,IAAkBpF,EACjC,OACG0E,GAEP,CDsIMW,CAAoC,CACtCrF,OAAQgB,EACRsE,iBAAiBpH,GAAkC,EAAImC,EAAAA,GACvDkF,OAAO,EACPjF,QAAS4D,IAKX,IAHAsB,EAAAA,EAAAA,YAAU,KACRrH,IAA6BqG,EAAa,GACzC,CAACA,EAAcxD,IACdwD,EAAc,CAChB,MAAMhE,GAAUC,EAAAA,EAAAA,GAAuB+D,EAAc,CAAEtI,aAAc,2CACrEwE,EAAAA,EAAOf,MAAMa,EAAS,CACpBG,KAAM,CACJC,KAAM,8BACNC,SAAU,gBAGd4E,EAAAA,EAAAA,GAAmBC,EAAAA,EAAwBC,uBAAwB,CACjEnF,WAEJ,CACA,MAAMoF,IAAiB/K,EAAAA,EAAAA,UAAQ,K,IAIiB+C,EAC1CA,EAiBgBA,EArBpB,IAAK2G,EACH,OAEF,MAAMsB,GAAyBC,EAAAA,EAAAA,IAAelI,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAuBmD,YACrE,IAAInD,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAuBmD,cAAe8E,EACxC,OAEF,MAAME,GAAYC,EAAAA,EAAAA,IAA2BzB,EAAgBS,SAC7D,IAAKe,EACH,OAEF,MAAME,EAAgBC,EAAAA,eAAeC,eACnCzJ,EAAAA,EAAAA,IAAuBiB,EAAauB,gBAAgB3C,SAAUI,EAAAA,GAAgBC,IAC9Ee,EAAauB,gBAAgBwE,UAEzB0C,EAAgBF,EAAAA,eAAeC,eACnCzJ,EAAAA,EAAAA,IAAuBiB,EAAasE,gBAAgB1F,SAAUI,EAAAA,GAAgBC,IAC9Ee,EAAasE,gBAAgByB,UAE/B,MAAO,CACL5G,KAAMuJ,EAAAA,EAAyBC,QAC/BC,SAAUhG,QAAQ3C,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAuBmD,YACzCC,6BACAwF,0BAAsB,EACtBC,0BAAsB,EACtBC,OAAQb,EACR5E,gBAAiBtE,EAAAA,GAAgB0C,GACjCsH,iCAA6B,EAC7BC,yBAAqB,EACrBC,yBAAqB,EACrBd,YACAe,OAAQ,CACNhK,KAAMuJ,EAAAA,EAAyBC,QAC/BpH,gBAAiB+G,EACjBhE,gBAAiBmE,GAEpB,GACA,CACD7B,EACAvD,EACApD,EACAD,EAAauB,gBACbvB,EAAasE,kBAEf,OAAO,SAAC1E,EAA2BwJ,SAAQ,CACzClK,MAAO,CACLmK,OAAQpB,GACRjG,OAAOsH,EAAAA,EAAAA,GAAyB,CAAErH,gBAAesH,cAAe1C,IAChE3E,QAASD,EAAgBE,EAAkB0E,EAAeC,QAAiB,G,SAE7E/G,GACJ,C,udElOa,MAAAyJ,GAAA,0RAAAC,GAAA,2LAAAC,GAAA,mdAAAC,GAAA,uLAAAC,GAAA,qNAAAC,GAAA,qLAAApN,GAAA,+NAAAC,GAAA,gNAgEPoN,IAAcC,EAAAA,GAAAA,GAAOC,GAAAA,GAAM,CAC/BC,gBAAiB,YACjBC,QAAS,OACTC,cAAe,MACfC,IAAK,GACLC,GAAI,OACJC,GAAI,OACJC,MAAO,OACPC,OAAQ,WACRC,EAAG,KAEL,SAASC,IAAe,aAAE1K,I,IAuBoBK,EAtB5C,MAAM,UAAEsK,EAAS,QAAE/I,IAAYgJ,EAAAA,EAAAA,MACzBC,GAAQC,EAAAA,GAAAA,MACR,EAAE/N,IAAMC,EAAAA,EAAAA,OACR,cAAE2D,EAAa,iBAAEoK,EAAgB,QAAEC,EAAO,KAAExE,EAAI,uBAAEpG,EAAsB,0BAAE6K,IAA8BrK,EAAAA,EAAAA,OACxG,gBAAE0C,GAAoB3C,GACtB,mBAAEuK,IAAuBjK,EAAAA,EAAAA,OACzB,gBAAEkK,IAAoBC,EAAAA,EAAAA,MACtBC,GAAuBC,EAAAA,GAAAA,IAAeC,GAAAA,GAAaC,gBAClDC,EAAkBC,IAAuBjL,EAAAA,EAAAA,UAAS,IACnDkL,GAAcC,EAAAA,EAAAA,KACdC,GAAevL,EAAAA,EAAAA,KAAagB,QAC5BjB,GAAUyL,EAAAA,GAAAA,MACVC,GAAWC,EAAAA,EAAAA,OACX,OAAE3C,EAAM,MAAErH,EAAK,QAAEE,GF/DlB,WACL,MAAM+J,GAAUC,EAAAA,EAAAA,YAAWtM,GAC3B,IAAKqM,EACH,MAAM,IAAIE,MAAM,kFAElB,OAAOF,CACT,CEyDqCG,GAC7BC,GAAQC,EAAAA,GAAAA,MACRC,GAAWC,EAAAA,EAAAA,MACXnP,EAAUA,KACd4N,OAA0B,EAAO,GAE7B,gBAAE1J,EAAe,gBAAE+C,GAAe,MAAEmI,IAAUzM,EAC9C0M,IAAsBC,EAAAA,GAAAA,IAAapL,SAAoB,EACvDqL,IAAsBD,EAAAA,GAAAA,IAAarI,UAAoB,EAI7D,OAHK+G,IAAyBwB,EAAAA,GAAAA,IAAcxM,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAASc,QAASsL,KAC5DF,EAAS,eAEJ,sB,WAAE,UAACjP,MAAAA,CAAIC,UAAAb,G,WAA8B,UAACoQ,EAAAA,GAAsBA,CAACC,aAAW,iB,WAAiB,UAACC,EAAAA,GAAiBA,CAACC,GAAG,a,WAAa,SAACC,EAAAA,GAAKA,CAACC,QAAQ,yBAAyB,KAAC,SAACC,EAAAA,EAAYA,CAACxP,KAAM,SAA0B,UAACoP,EAAAA,GAAiBA,CAACC,GAAI,iBAAiBtC,KAAa/I,I,UAAYL,EAAgB3C,SAASW,OAAO,MAAI+E,GAAgB1F,SAASW,OAAO,KAAC,SAAC6N,EAAAA,EAAYA,CAACxP,KAAM,YAAmD,UAACN,MAAAA,CAAIC,UAAAd,G,WAAkF,SAACoB,GAAAA,GAAIA,CAAC0M,MAAM,OAAOzM,QAAQ,W,UAAW,SAACoP,EAAAA,GAAKA,CAACC,QAAQ,+BAAmC,UAACE,GAAAA,EAAIA,CACzlBC,KAAG,EACHrD,gBAAgB,YAChBsD,aAAa,aACbC,WAAW,SACXC,eAAe,SACfrD,IAAI,QACJsD,GAAG,YACHC,GAAG,gBACCC,GAAAA,EACJnQ,QAAS,KACPsN,EAAiB,IACZ8C,EAAAA,GACHvK,kBACAwK,eAAgB,CACd,CAACC,GAAAA,EAAcC,SAASjP,EAAAA,EAAAA,IAAuBwC,EAAgB3C,SAAU0E,GACzE,CAACyK,GAAAA,EAAcE,SAASlP,EAAAA,EAAAA,IAAuBuF,GAAgB1F,SAAU0E,MAG7E4H,EAAmBgD,EAAAA,IACnB/C,EAAgBgD,EAAAA,IAChBnD,EAAQoD,EAAAA,GAAiBC,2BAA2B,E,WAEvD,SAACC,GAAAA,EAAUA,CAAC3Q,MAAM,YAAYC,KAAM,MAAM,SAACC,GAAAA,GAAIA,CAACC,QAAQ,eAAeH,MAAM,Y,UAAY,SAACuP,EAAAA,GAAKA,CAACC,QAAQ,iCAA6C,UAAC7P,MAAAA,CAAIC,UAAAsM,G,WAA6BwC,EAAMkC,KAAM,SAAClB,GAAAA,EAAIA,CACvM9C,MAAO,IACPiE,UAAU,aACVC,gBAAe,CAAEC,SAAU,SAAUC,IAAKC,GAAAA,EAAuB,I,UAClE,SAACC,EAAAA,EAAqBA,CACrBC,MAAO,CACL,CAAEC,MAAOhS,EAAE,yBAA0BiS,OAAQxI,IAAS4H,EAAAA,GAAiBC,4BACvE,CAAEU,MAAOhS,EAAE,oBAAqBiS,OAAQxI,IAAS4H,EAAAA,GAAiBa,mBAE5D,UAAC3R,MAAAA,CAAIC,UAAAqM,G,WAAgD,SAACsF,EAAAA,EAAqBA,CAACC,kBAAmBnP,EAAcoP,UAAQ,KAAG,SAAC9R,MAAAA,CAAIC,UAAAoM,G,UAA6C,SAACrM,MAAAA,CAAIC,UAAAmM,G,UAA6E,SAAC2F,GAAAA,EAASA,CAACzR,KAAM,GAAID,MAAM,kBAA6B6I,IAAS4H,EAAAA,GAAiBC,4BAA6B,SAACiB,EAAAA,EAAgBA,CACpY/E,MAAM,OACNgF,SAAS,QACTC,cAAY,EACZC,WAAY,KACVzE,EAAQoD,EAAAA,GAAiBa,YAAY,KAEpC,SAACS,EAAAA,EAAoBA,CAACnF,MAAM,OAAOgF,SAAS,UAAY/I,IAAS4H,EAAAA,GAAiBa,cAAe,sB,WAAE,SAACU,EAAAA,GAASA,CAACpF,MAAM,OAAOgF,SAAS,Q,UAAQ,SAACK,EAAAA,EAAoBA,CACpK5P,aAAcA,EACd6P,mBAAoBxG,GAAUzG,QAAQZ,GACtCyN,WAAY,K,IAEMpP,EADhB,MAAMyP,GAAYC,EAAAA,EAAAA,GAA0B1G,GACvChJ,IAAWA,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAASlB,QAAS6Q,GAAAA,EAAYC,gBAAmBH,GAGjE/D,EACEmE,GAAAA,EAAcC,QAAQC,QAAQ,CAC5BzE,cACAE,eACAxL,UACAgQ,mBAAoBhH,EACpBiH,eAAgBrF,EAChBsF,SAAU7E,EACV8E,UAAWA,KACTnT,IACAkP,EAAS,aAAa,EAExBkE,UAAWpT,EACXqT,UAAW,KACNC,EAAAA,EAAAA,GAA6B,CAC9B9F,QACAtG,IAAKvE,EAAawE,QAClBY,UAAW7D,EAAgB3C,SAC3ByG,UAAWf,GAAgB1F,SAC3BgS,mBAAoBlE,GACpBmE,mBAAoBjE,GACpBkE,OAAQ9Q,EAAa8Q,OACrBC,QAAS/R,EAAAA,GAAgB0C,KAE3ByH,OAAQ,YAEZ,OAGQ,SAAC7L,MAAAA,CAAIC,UAAAkM,G,UAAiB,SAACuH,EAAAA,EAAYA,CAACC,aAAcjP,EAAOvE,QAASyE,mBAA2C,UAACgP,GAAAA,EAAKA,CAC/H1J,KAAM2J,GAAAA,GAAUC,iBAChB/T,QAASA,EACTgU,eAAa,EACbC,YAAa1O,QAAQxC,G,WACtB,SAACzD,EAAAA,EAAoBA,CAACC,MAAOG,EAAE,yBAA0BF,WAAYQ,KAAW,UAACC,MAAAA,CAAIC,UAAAiM,G,WAA6C,SAAChL,EAAAA,EAASA,CAACC,eAAgB8C,EAAiB7C,kBAAmBgO,GAAqB/N,aAAW,KAAG,SAACd,GAAAA,GAAIA,CAACC,QAAQ,QAAQH,MAAM,Y,SAAaZ,EAAE,iBAAqB,SAACyB,EAAAA,EAASA,CAACC,eAAgB6F,GAAiB5F,kBAAmBkO,GAAqBjO,aAAW,QAAU,SAAC4S,GAAAA,EAAiBA,CAACzC,MAAOrD,EAAkB+F,YAAapR,SACzc,CACe,SAASqR,K,IAYL5P,EAXjB,MAAM,QAAED,IAAYgJ,EAAAA,EAAAA,MACdtJ,GAAUoQ,EAAAA,GAAAA,MACVrR,GAAUC,EAAAA,EAAAA,MACV,KAAEuB,EAAMC,UAAW6P,IAAoBC,EAAAA,GAAAA,GAC3CvR,EAAQc,QAAU,CAChBsL,MAAOpM,EAAQc,QACfmC,gBAAiBtE,EAAAA,GAAgB0C,GACjCE,UACAN,QAASA,GAAWjB,EAAQiB,cAC1B,GAEAoN,EAAW7M,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAM6M,SACjB1O,GAAe9C,EAAAA,EAAAA,UAAQ,KAAM2U,EAAAA,EAAAA,IAAkBnD,IAAW,CAACA,IAC3DoD,EClMO,SAA4B9R,GACzC,OAAO9C,EAAAA,EAAAA,UAAQ,KACb,IAAK8C,EACH,OAEF,GAAIA,EAAa+R,SAAWC,EAAAA,GAAeC,aACzC,OAEF,GAAIjS,EAAa+Q,UAAY/R,EAAAA,GAAgB0C,GAC3C,OAEF,IAAK1B,EAAauD,KAChB,OAEF,MAAMI,EAAYK,OAAOhE,EAAa2D,WAChCG,EAAYE,OAAOhE,EAAa8D,WAChCoO,GAAaC,EAAAA,EAAAA,GAAenS,EAAauD,KAAKc,QAAQF,SAC5D,MAAO,CACLR,UAAWuO,GAAcpO,EAAYH,EACrCG,UAAWoO,GAAcvO,EAAYG,EACrCsO,aAAcpS,EAAa+R,SAAWC,EAAAA,GAAeC,aACtD,GACA,CAACjS,GACN,CD2K0BqS,CAAmBrS,GAC3C,GAAI2R,IAAoBjD,IAAa1O,GAAgBA,EAAa+Q,UAAY/R,EAAAA,GAAgB0C,GAC5F,OAAO,SAACoI,GAAAA,C,UAAY,UAACwI,EAAAA,GAAWA,C,WAAC,SAACC,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,IAAG,SAACA,EAAAA,GAAUA,CAAAA,QAE1L,MAAM,gBAAEhR,EAAe,gBAAE+C,EAAe,QAAEE,GAAYxE,EACtD,OAAO,SAACwS,GAAAA,EAAKA,CACXC,eAAa,EACbC,KAAMC,GAAAA,GAAuBlB,UAC7BmB,WAAY,CACVC,aAAc7S,EAAa8Q,OAC3BgC,SAAUxR,GAAWjB,EAAQiB,QAC7ByN,MAAO,CAACxN,EAAgB3C,SAASW,OAAQ+E,EAAgB1F,SAASW,QAAQwT,KAAK,KAC/EC,SAAUxO,EACVyO,eAAeC,EAAAA,GAAAA,KAAoBC,EAAAA,GAAAA,IAAW5R,EAAgB3C,WAC9DwU,eAAeF,EAAAA,GAAAA,KAAoBC,EAAAA,GAAAA,IAAW7O,EAAgB1F,Y,UAEjE,SAACyU,EAAAA,EAAyBA,CAACC,eAAgBhS,E,UAAS,SAACiS,GAAAA,GAAkCA,CAACC,WAAYC,GAAAA,GAAsBC,G,UAAI,SAACC,EAAAA,GAA6BA,CAC3JC,aAAc,CACZ9B,kBACAhE,eAAgB,CACd,CAACC,GAAAA,EAAcC,SAASjP,EAAAA,EAAAA,IAAuBwC,EAAgB3C,SAAUI,EAAAA,GAAgBC,IACzF,CAAC8O,GAAAA,EAAcE,SAASlP,EAAAA,EAAAA,IAAuBuF,EAAgB1F,SAAUI,EAAAA,GAAgBC,M,UAG9F,SAAC4U,EAAAA,GAAyBA,C,UAAC,SAACC,EAAAA,GAAsBA,C,UAAC,SAAChU,EAAkCA,CAACE,aAAcA,E,UAAc,SAAC0K,GAAAA,CAAe1K,aAAcA,iBACpJ,C,yDE7NO,SAASmS,EAAevT,G,IAIzBmV,EAHJ,OAAInV,EAASuF,SACJvF,GAEoC,QAAzCmV,EAAAA,EAAAA,GAAwBnV,EAAS0C,gBAAjCyS,IAAAA,OAAAA,EAAAA,EAA2CC,OAAOpV,KAC7CqV,EAAAA,EAAAA,IAAcrV,EAAS0C,SAEzB1C,CACT,C,wECPO,SAASgT,EAAoBsC,GAClC,OAAO5M,EAAAA,EAAAA,GAAS6M,EAAAA,GAAaD,EAAO,CAAEE,UAAWC,EAAAA,GAAqB1R,UAAWuR,GACnF,C","sources":["webpack://@uniswap/interface/./src/pages/MigrateV3/index.tsx?fe10","webpack://@uniswap/interface/./src/components/Liquidity/TokenInfo.tsx?69de","webpack://@uniswap/interface/./src/components/Liquidity/LiquidityModalHeader.tsx?b936","webpack://@uniswap/interface/./src/components/Liquidity/LiquidityModalHeader.tsx?fea1","webpack://@uniswap/interface/./src/components/Liquidity/TokenInfo.tsx?7209","pages/MigrateV3/MigrateV3LiquidityTxContext.tsx","../../../packages/uniswap/src/data/apiClients/tradingApi/useMigrateV3LpPositionCalldataQuery.ts","webpack://@uniswap/interface/./src/pages/MigrateV3/index.tsx?e157","pages/MigrateV3/hooks/useInitialPosition.ts","utils/unwrappedToken.ts","../../../packages/uniswap/src/data/rest/getPosition.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, ModalCloseIcon, Text, TouchableArea } from \"ui/src\";\nimport { BackArrow } from \"ui/src/components/icons/BackArrow\";\nimport { SwapFormSettings } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/SwapFormSettings\";\nimport { Deadline } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Deadline/Deadline\";\nimport { Slippage } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Slippage/Slippage\";\nexport function LiquidityModalHeader({\n  title,\n  closeModal,\n  goBack\n}) {\n  const { t } = useTranslation();\n  const CloseIconComponent = useMemo(\n    () => <ModalCloseIcon testId=\"LiquidityModalHeader-close\" onClose={closeModal} />,\n    [closeModal]\n  );\n  return <Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$spacing4\" width=\"100%\">{goBack ? <TouchableArea onPress={goBack}><BackArrow color=\"$neutral1\" size=\"$icon.24\" /></TouchableArea> : CloseIconComponent}<Text variant=\"body2\" flexGrow={1} textAlign=\"center\" pr={24}>{title}</Text>{!goBack ? <SwapFormSettings\n    adjustTopAlignment={false}\n    settings={[Slippage, Deadline]}\n    defaultTitle={t(\"pool.positions.transaction.settings\")}\n  /> : <Flex position=\"absolute\" top=\"0\" right=\"0\" p=\"$spacing4\">{CloseIconComponent}</Flex>}</Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport CurrencyLogo from \"components/Logo/CurrencyLogo\";\nimport { getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { Flex, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { getSymbolDisplayText } from \"uniswap/src/utils/currency\";\nimport { NumberType } from \"utilities/src/format/types\";\nexport function TokenInfo({\n  currencyAmount,\n  currencyUSDAmount,\n  isMigrating = false\n}) {\n  const { formatCurrencyAmount } = useLocalizationContext();\n  const currency = isMigrating ? getCurrencyForProtocol(currencyAmount?.currency, ProtocolVersion.V4) : currencyAmount?.currency;\n  return <Flex row alignItems=\"center\"><Flex grow><Text variant=\"heading2\">{formatCurrencyAmount({\n    value: currencyAmount,\n    type: NumberType.TokenNonTx\n  })}{\" \"}{getSymbolDisplayText(currency?.symbol)}</Text><Text variant=\"body3\" color=\"$neutral2\">{formatCurrencyAmount({\n    value: currencyUSDAmount,\n    type: NumberType.FiatStandard\n  })}</Text></Flex><CurrencyLogo currency={currency} size={iconSizes.icon36} /></Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { useV3OrV4PositionDerivedInfo } from \"components/Liquidity/hooks\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport { useCreatePositionContext, usePriceRangeContext } from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { getCurrencyAddressForTradingApi, getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { useCheckLpApprovalQuery } from \"uniswap/src/data/apiClients/tradingApi/useCheckLpApprovalQuery\";\nimport { useMigrateV3LpPositionCalldataQuery } from \"uniswap/src/data/apiClients/tradingApi/useMigrateV3LpPositionCalldataQuery\";\nimport {\n  ProtocolItems,\n  UniversalRouterVersion\n} from \"uniswap/src/data/tradingApi/__generated__\";\nimport { InterfaceEventNameLocal } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport {\n  LiquidityTransactionType\n} from \"uniswap/src/features/transactions/liquidity/types\";\nimport { getErrorMessageToDisplay, parseErrorMessageTitle } from \"uniswap/src/features/transactions/liquidity/utils\";\nimport { TransactionStepType } from \"uniswap/src/features/transactions/swap/types/steps\";\nimport { validatePermit, validateTransactionRequest } from \"uniswap/src/features/transactions/swap/utils/trade\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { ONE_SECOND_MS } from \"utilities/src/time/time\";\nimport { useAccount } from \"wagmi\";\nconst MigrateV3PositionTxContext = createContext(void 0);\nexport function useMigrateV3TxContext() {\n  const context = useContext(MigrateV3PositionTxContext);\n  if (!context) {\n    throw new Error(\"useMigrateV3TxContext must be used within a MigrateV3PositionTxContextProvider\");\n  }\n  return context;\n}\nexport function MigrateV3PositionTxContextProvider({\n  children,\n  positionInfo\n}) {\n  const account = useAccount();\n  const [hasMigrateErrorResponse, setHasMigrateErrorResponse] = useState(false);\n  const { derivedPositionInfo, positionState, currentTransactionStep } = useCreatePositionContext();\n  const { feeValue0, feeValue1 } = useV3OrV4PositionDerivedInfo(positionInfo);\n  const {\n    derivedPriceRangeInfo,\n    priceRangeState: { fullRange }\n  } = usePriceRangeContext();\n  const increaseLiquidityApprovalParams = useMemo(() => {\n    if (!positionInfo || !account.address) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: true,\n      walletAddress: account.address,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      protocol: ProtocolItems.V3,\n      positionToken: positionInfo.tokenId\n    };\n  }, [positionInfo, account.address]);\n  const {\n    data: migrateTokenApprovals,\n    isLoading: approvalLoading,\n    error: approvalError,\n    refetch: approvalRefetch\n  } = useCheckLpApprovalQuery({\n    params: increaseLiquidityApprovalParams,\n    headers: {\n      \"x-universal-router-version\": UniversalRouterVersion._2_0\n    },\n    staleTime: 5 * ONE_SECOND_MS,\n    enabled: Boolean(increaseLiquidityApprovalParams)\n  });\n  if (approvalError) {\n    const message = parseErrorMessageTitle(approvalError, { defaultTitle: \"unknown CheckLpApprovalQuery\" });\n    logger.error(message, {\n      tags: {\n        file: \"MigrateV3LiquidityTxContext\",\n        function: \"useEffect\"\n      }\n    });\n  }\n  const approvalsNeeded = !approvalLoading && Boolean(migrateTokenApprovals?.permitData);\n  const migratePositionRequestArgs = useMemo(() => {\n    if (!derivedPositionInfo || !positionInfo || !positionInfo.tokenId || !account?.address || !derivedPriceRangeInfo || derivedPositionInfo.protocolVersion !== ProtocolVersion.V4 || derivedPriceRangeInfo.protocolVersion !== ProtocolVersion.V4 || !positionInfo.pool || !positionInfo.liquidity) {\n      return void 0;\n    }\n    const destinationPool = derivedPositionInfo.pool ?? derivedPriceRangeInfo.mockPool;\n    if (!destinationPool) {\n      return void 0;\n    }\n    const tickLower = fullRange ? derivedPriceRangeInfo.tickSpaceLimits[0] : derivedPriceRangeInfo.ticks?.[0];\n    const tickUpper = fullRange ? derivedPriceRangeInfo.tickSpaceLimits[1] : derivedPriceRangeInfo.ticks?.[1];\n    if (tickLower === void 0 || tickUpper === void 0 || !positionInfo.pool || !positionInfo.liquidity) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: !approvalsNeeded,\n      inputProtocol: ProtocolItems.V3,\n      tokenId: Number(positionInfo.tokenId),\n      inputPosition: {\n        pool: {\n          token0: positionInfo.currency0Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency0Amount.currency.address,\n          token1: positionInfo.currency1Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency1Amount.currency.address,\n          fee: positionInfo.feeTier ? Number(positionInfo.feeTier) : void 0,\n          tickSpacing: positionInfo?.tickSpacing ? Number(positionInfo?.tickSpacing) : void 0\n        },\n        tickLower: positionInfo.tickLower ? Number(positionInfo.tickLower) : void 0,\n        tickUpper: positionInfo.tickUpper ? Number(positionInfo.tickUpper) : void 0\n      },\n      inputPoolLiquidity: positionInfo.pool.liquidity.toString(),\n      inputCurrentTick: positionInfo.pool.tickCurrent,\n      inputSqrtRatioX96: positionInfo.pool.sqrtRatioX96?.toString(),\n      inputPositionLiquidity: positionInfo.liquidity,\n      outputProtocol: ProtocolItems.V4,\n      outputPosition: {\n        pool: {\n          token0: getCurrencyAddressForTradingApi(destinationPool.currency0),\n          token1: getCurrencyAddressForTradingApi(destinationPool.currency1),\n          fee: positionState.fee.feeAmount,\n          hooks: positionState.hook,\n          tickSpacing: destinationPool.tickSpacing\n        },\n        tickLower,\n        tickUpper\n      },\n      outputPoolLiquidity: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.liquidity.toString(),\n      outputSqrtRatioX96: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.sqrtRatioX96.toString(),\n      outputCurrentTick: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.tickCurrent,\n      initialPrice: derivedPositionInfo.creatingPoolOrPair ? destinationPool.sqrtRatioX96.toString() : void 0,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      walletAddress: account.address,\n      expectedTokenOwed0RawAmount: feeValue0?.quotient.toString() ?? \"0\",\n      expectedTokenOwed1RawAmount: feeValue1?.quotient.toString() ?? \"0\",\n      amount0: positionInfo.currency0Amount.quotient.toString(),\n      amount1: positionInfo.currency1Amount.quotient.toString()\n    };\n  }, [\n    derivedPositionInfo,\n    positionInfo,\n    account,\n    derivedPriceRangeInfo,\n    fullRange,\n    positionState.fee.feeAmount,\n    positionState.hook,\n    feeValue0?.quotient,\n    feeValue1?.quotient,\n    approvalsNeeded\n  ]);\n  const isRangeValid = derivedPriceRangeInfo.protocolVersion !== ProtocolVersion.V2 && !derivedPriceRangeInfo.invalidPrice && !derivedPriceRangeInfo.invalidRange;\n  const isUserCommitedToMigrate = currentTransactionStep?.step.type === TransactionStepType.MigratePositionTransactionStep || currentTransactionStep?.step.type === TransactionStepType.MigratePositionTransactionStepAsync;\n  const isQueryEnabled = !isUserCommitedToMigrate && !approvalLoading && !approvalError && Boolean(migratePositionRequestArgs) && isRangeValid;\n  const {\n    data: migrateCalldata,\n    error: migrateError,\n    refetch: migrateRefetch\n  } = useMigrateV3LpPositionCalldataQuery({\n    params: migratePositionRequestArgs,\n    refetchInterval: hasMigrateErrorResponse ? false : 5 * ONE_SECOND_MS,\n    retry: false,\n    enabled: isQueryEnabled\n  });\n  useEffect(() => {\n    setHasMigrateErrorResponse(!!migrateError);\n  }, [migrateError, migratePositionRequestArgs]);\n  if (migrateError) {\n    const message = parseErrorMessageTitle(migrateError, { defaultTitle: \"unknown MigrateLpPositionCalldataQuery\" });\n    logger.error(message, {\n      tags: {\n        file: \"MigrateV3LiquidityTxContext\",\n        function: \"useEffect\"\n      }\n    });\n    sendAnalyticsEvent(InterfaceEventNameLocal.MigrateLiquidityFailed, {\n      message\n    });\n  }\n  const validatedValue = useMemo(() => {\n    if (!migrateCalldata) {\n      return void 0;\n    }\n    const validatedPermitRequest = validatePermit(migrateTokenApprovals?.permitData);\n    if (migrateTokenApprovals?.permitData && !validatedPermitRequest) {\n      return void 0;\n    }\n    const txRequest = validateTransactionRequest(migrateCalldata.migrate);\n    if (!txRequest) {\n      return void 0;\n    }\n    const outputAmount0 = CurrencyAmount.fromRawAmount(\n      getCurrencyForProtocol(positionInfo.currency0Amount.currency, ProtocolVersion.V4),\n      positionInfo.currency0Amount.quotient\n    );\n    const outputAmount1 = CurrencyAmount.fromRawAmount(\n      getCurrencyForProtocol(positionInfo.currency1Amount.currency, ProtocolVersion.V4),\n      positionInfo.currency1Amount.quotient\n    );\n    return {\n      type: LiquidityTransactionType.Migrate,\n      unsigned: Boolean(migrateTokenApprovals?.permitData),\n      migratePositionRequestArgs,\n      approveToken0Request: void 0,\n      approveToken1Request: void 0,\n      permit: validatedPermitRequest,\n      protocolVersion: ProtocolVersion.V3,\n      approvePositionTokenRequest: void 0,\n      revokeToken0Request: void 0,\n      revokeToken1Request: void 0,\n      txRequest,\n      action: {\n        type: LiquidityTransactionType.Migrate,\n        currency0Amount: outputAmount0,\n        currency1Amount: outputAmount1\n      }\n    };\n  }, [\n    migrateCalldata,\n    migratePositionRequestArgs,\n    migrateTokenApprovals,\n    positionInfo.currency0Amount,\n    positionInfo.currency1Amount\n  ]);\n  return <MigrateV3PositionTxContext.Provider\n    value={{\n      txInfo: validatedValue,\n      error: getErrorMessageToDisplay({ approvalError, calldataError: migrateError }),\n      refetch: approvalError ? approvalRefetch : migrateError ? migrateRefetch : void 0\n    }}\n  >{children}</MigrateV3PositionTxContext.Provider>;\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { uniswapUrls } from \"uniswap/src/constants/urls\";\nimport { migrateLpPosition } from \"uniswap/src/data/apiClients/tradingApi/TradingApiClient\";\nimport { ReactQueryCacheKey } from \"utilities/src/reactQuery/cache\";\nexport function useMigrateV3LpPositionCalldataQuery({\n  params,\n  ...rest\n}) {\n  const queryKey = [ReactQueryCacheKey.TradingApi, uniswapUrls.tradingApiPaths.migrate, params];\n  return useQuery({\n    queryKey,\n    queryFn: async () => {\n      if (!params) {\n        throw { name: \"Params are required\" };\n      }\n      return await migrateLpPosition(params);\n    },\n    ...rest\n  });\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { BreadcrumbNavContainer, BreadcrumbNavLink } from \"components/BreadcrumbNav\";\nimport { ErrorCallout } from \"components/ErrorCallout\";\nimport { LiquidityModalHeader } from \"components/Liquidity/LiquidityModalHeader\";\nimport { LiquidityPositionCard } from \"components/Liquidity/LiquidityPositionCard\";\nimport { TokenInfo } from \"components/Liquidity/TokenInfo\";\nimport { getLPBaseAnalyticsProperties } from \"components/Liquidity/analytics\";\nimport { parseRestPosition } from \"components/Liquidity/utils\";\nimport { LoadingRows } from \"components/Loader/styled\";\nimport { PoolProgressIndicator } from \"components/PoolProgressIndicator/PoolProgressIndicator\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { MigrateV3PositionTxContextProvider, useMigrateV3TxContext } from \"pages/MigrateV3/MigrateV3LiquidityTxContext\";\nimport useInitialPosition from \"pages/MigrateV3/hooks/useInitialPosition\";\nimport {\n  CreatePositionContextProvider,\n  DepositContextProvider,\n  PriceRangeContextProvider\n} from \"pages/Pool/Positions/create/ContextProviders\";\nimport {\n  DEFAULT_DEPOSIT_STATE,\n  DEFAULT_PRICE_RANGE_STATE,\n  useCreatePositionContext,\n  useDepositContext,\n  usePriceRangeContext\n} from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { EditSelectTokensStep } from \"pages/Pool/Positions/create/EditStep\";\nimport { SelectPriceRangeStep } from \"pages/Pool/Positions/create/RangeSelectionStep\";\nimport { SelectTokensStep } from \"pages/Pool/Positions/create/SelectTokenStep\";\nimport { Container } from \"pages/Pool/Positions/create/shared\";\nimport { DEFAULT_POSITION_STATE, PositionFlowStep } from \"pages/Pool/Positions/create/types\";\nimport { getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { LoadingRow } from \"pages/Pool/Positions/shared\";\nimport { useMemo, useState } from \"react\";\nimport { ChevronRight } from \"react-feather\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { MultichainContextProvider } from \"state/multichain/MultichainContext\";\nimport { liquiditySaga } from \"state/sagas/liquidity/liquiditySaga\";\nimport { ClickableTamaguiStyle } from \"theme/components/styles\";\nimport { PositionField } from \"types/position\";\nimport { Flex, Main, Text, styled, useMedia } from \"ui/src\";\nimport { ArrowDown } from \"ui/src/components/icons/ArrowDown\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nimport { INTERFACE_NAV_HEIGHT } from \"ui/src/theme/heights\";\nimport { ProgressIndicator } from \"uniswap/src/components/ConfirmSwapModal/ProgressIndicator\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { useGetPositionQuery } from \"uniswap/src/data/rest/getPosition\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { FeatureFlags } from \"uniswap/src/features/gating/flags\";\nimport { useFeatureFlag } from \"uniswap/src/features/gating/hooks\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { InterfacePageNameLocal, ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/hooks/useUSDCPrice\";\nimport { isValidLiquidityTxContext } from \"uniswap/src/features/transactions/liquidity/types\";\nimport { TransactionSettingsContextProvider } from \"uniswap/src/features/transactions/settings/contexts/TransactionSettingsContext\";\nimport { TransactionSettingKey } from \"uniswap/src/features/transactions/settings/slice\";\nimport { currencyId, currencyIdToAddress } from \"uniswap/src/utils/currencyId\";\nimport { isSameAddress } from \"utilities/src/addresses\";\nimport { useTrace } from \"utilities/src/telemetry/trace/TraceContext\";\nimport { useChainIdFromUrlParam } from \"utils/chainParams\";\nimport { useAccount } from \"wagmi\";\nconst BodyWrapper = styled(Main, {\n  backgroundColor: \"$surface1\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  gap: 60,\n  mt: \"1rem\",\n  mx: \"auto\",\n  width: \"100%\",\n  zIndex: \"$default\",\n  p: 24\n});\nfunction MigrateV3Inner({ positionInfo }) {\n  const { chainName, tokenId } = useParams();\n  const trace = useTrace();\n  const { t } = useTranslation();\n  const { positionState, setPositionState, setStep, step, currentTransactionStep, setCurrentTransactionStep } = useCreatePositionContext();\n  const { protocolVersion } = positionState;\n  const { setPriceRangeState } = usePriceRangeContext();\n  const { setDepositState } = useDepositContext();\n  const isMigrateToV4Enabled = useFeatureFlag(FeatureFlags.MigrateV3ToV4);\n  const [transactionSteps, setTransactionSteps] = useState([]);\n  const selectChain = useSelectChain();\n  const startChainId = useAccount().chainId;\n  const account = useAccountMeta();\n  const dispatch = useDispatch();\n  const { txInfo, error, refetch } = useMigrateV3TxContext();\n  const media = useMedia();\n  const navigate = useNavigate();\n  const onClose = () => {\n    setCurrentTransactionStep(void 0);\n  };\n  const { currency0Amount, currency1Amount, owner } = positionInfo;\n  const currency0FiatAmount = useUSDCValue(currency0Amount) ?? void 0;\n  const currency1FiatAmount = useUSDCValue(currency1Amount) ?? void 0;\n  if (!isMigrateToV4Enabled || !isSameAddress(account?.address, owner)) {\n    navigate(\"/positions\");\n  }\n  return <><Flex mt=\"$spacing48\" gap=\"$gap36\"><BreadcrumbNavContainer aria-label=\"breadcrumb-nav\"><BreadcrumbNavLink to=\"/positions\"><Trans i18nKey=\"pool.positions.title\" /> <ChevronRight size={14} /></BreadcrumbNavLink><BreadcrumbNavLink to={`/positions/v3/${chainName}/${tokenId}`}>{currency0Amount.currency.symbol} / {currency1Amount.currency.symbol} <ChevronRight size={14} /></BreadcrumbNavLink></BreadcrumbNavContainer><Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$gap20\" width=\"100%\"><Text width=\"100%\" variant=\"heading2\"><Trans i18nKey=\"common.migrate.position\" /></Text><Flex\n    row\n    backgroundColor=\"$surface2\"\n    borderRadius=\"$rounded12\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    gap=\"$gap4\"\n    py=\"$padding8\"\n    px=\"$padding12\"\n    {...ClickableTamaguiStyle}\n    onPress={() => {\n      setPositionState({\n        ...DEFAULT_POSITION_STATE,\n        protocolVersion,\n        currencyInputs: {\n          [PositionField.TOKEN0]: getCurrencyForProtocol(currency0Amount.currency, protocolVersion),\n          [PositionField.TOKEN1]: getCurrencyForProtocol(currency1Amount.currency, protocolVersion)\n        }\n      });\n      setPriceRangeState(DEFAULT_PRICE_RANGE_STATE);\n      setDepositState(DEFAULT_DEPOSIT_STATE);\n      setStep(PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER);\n    }}\n  ><RotateLeft color=\"$neutral1\" size={16} /><Text variant=\"buttonLabel4\" color=\"$neutral2\"><Trans i18nKey=\"common.button.reset\" /></Text></Flex></Flex><Flex row gap={32} width=\"100%\">{!media.xl && <Flex\n    width={360}\n    alignSelf=\"flex-start\"\n    $platform-web={{ position: \"sticky\", top: INTERFACE_NAV_HEIGHT + 25 }}\n  ><PoolProgressIndicator\n    steps={[\n      { label: t(\"migrate.selectFeeTier\"), active: step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER },\n      { label: t(\"migrate.setRange\"), active: step === PositionFlowStep.PRICE_RANGE }\n    ]}\n  /></Flex>}<Flex gap=\"$gap16\" maxWidth=\"calc(min(580px, 90vw))\"><LiquidityPositionCard liquidityPosition={positionInfo} disabled /><Flex justifyContent=\"center\" alignItems=\"center\"><Flex shrink backgroundColor=\"$surface2\" borderRadius=\"$rounded12\" p=\"$padding12\"><ArrowDown size={20} color=\"$neutral1\" /></Flex></Flex>{step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER ? <SelectTokensStep\n    width=\"100%\"\n    maxWidth=\"unset\"\n    tokensLocked\n    onContinue={() => {\n      setStep(PositionFlowStep.PRICE_RANGE);\n    }}\n  /> : <EditSelectTokensStep width=\"100%\" maxWidth=\"unset\" />}{step === PositionFlowStep.PRICE_RANGE && <><Container width=\"100%\" maxWidth=\"unset\"><SelectPriceRangeStep\n    positionInfo={positionInfo}\n    onDisableContinue={!txInfo || Boolean(error)}\n    onContinue={() => {\n      const isValidTx = isValidLiquidityTxContext(txInfo);\n      if (!account || account?.type !== AccountType.SignerMnemonic || !isValidTx) {\n        return;\n      }\n      dispatch(\n        liquiditySaga.actions.trigger({\n          selectChain,\n          startChainId,\n          account,\n          liquidityTxContext: txInfo,\n          setCurrentStep: setCurrentTransactionStep,\n          setSteps: setTransactionSteps,\n          onSuccess: () => {\n            onClose();\n            navigate(\"/positions\");\n          },\n          onFailure: onClose,\n          analytics: {\n            ...getLPBaseAnalyticsProperties({\n              trace,\n              fee: positionInfo.feeTier,\n              currency0: currency0Amount.currency,\n              currency1: currency1Amount.currency,\n              currency0AmountUsd: currency0FiatAmount,\n              currency1AmountUsd: currency1FiatAmount,\n              poolId: positionInfo.poolId,\n              version: ProtocolVersion.V3\n            }),\n            action: \"V3->V4\"\n          }\n        })\n      );\n    }}\n  /></Container><Flex mb=\"$spacing20\"><ErrorCallout errorMessage={error} onPress={refetch} /></Flex></>}</Flex></Flex></Flex><Modal\n    name={ModalName.MigrateLiquidity}\n    onClose={onClose}\n    isDismissible\n    isModalOpen={Boolean(currentTransactionStep)}\n  ><LiquidityModalHeader title={t(\"pool.migrateLiquidity\")} closeModal={onClose} /><Flex gap=\"$gap16\" px=\"$padding16\" my=\"$spacing8\"><TokenInfo currencyAmount={currency0Amount} currencyUSDAmount={currency0FiatAmount} isMigrating /><Text variant=\"body3\" color=\"$neutral2\">{t(\"common.and\")}</Text><TokenInfo currencyAmount={currency1Amount} currencyUSDAmount={currency1FiatAmount} isMigrating /></Flex><ProgressIndicator steps={transactionSteps} currentStep={currentTransactionStep} /></Modal></>;\n}\nexport default function MigrateV3() {\n  const { tokenId } = useParams();\n  const chainId = useChainIdFromUrlParam();\n  const account = useAccount();\n  const { data, isLoading: positionLoading } = useGetPositionQuery(\n    account.address ? {\n      owner: account.address,\n      protocolVersion: ProtocolVersion.V3,\n      tokenId,\n      chainId: chainId ?? account.chainId\n    } : void 0\n  );\n  const position = data?.position;\n  const positionInfo = useMemo(() => parseRestPosition(position), [position]);\n  const initialPosition = useInitialPosition(positionInfo);\n  if (positionLoading || !position || !positionInfo || positionInfo.version !== ProtocolVersion.V3) {\n    return <BodyWrapper><LoadingRows><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /></LoadingRows></BodyWrapper>;\n  }\n  const { currency0Amount, currency1Amount, feeTier } = positionInfo;\n  return <Trace\n    logImpression\n    page={InterfacePageNameLocal.MigrateV3}\n    properties={{\n      pool_address: positionInfo.poolId,\n      chain_id: chainId ?? account.chainId,\n      label: [currency0Amount.currency.symbol, currency1Amount.currency.symbol].join(\"/\"),\n      fee_tier: feeTier,\n      token0Address: currencyIdToAddress(currencyId(currency0Amount.currency)),\n      token1Address: currencyIdToAddress(currencyId(currency1Amount.currency))\n    }}\n  ><MultichainContextProvider initialChainId={chainId}><TransactionSettingsContextProvider settingKey={TransactionSettingKey.LP}><CreatePositionContextProvider\n    initialState={{\n      initialPosition,\n      currencyInputs: {\n        [PositionField.TOKEN0]: getCurrencyForProtocol(currency0Amount.currency, ProtocolVersion.V4),\n        [PositionField.TOKEN1]: getCurrencyForProtocol(currency1Amount.currency, ProtocolVersion.V4)\n      }\n    }}\n  ><PriceRangeContextProvider><DepositContextProvider><MigrateV3PositionTxContextProvider positionInfo={positionInfo}><MigrateV3Inner positionInfo={positionInfo} /></MigrateV3PositionTxContextProvider></DepositContextProvider></PriceRangeContextProvider></CreatePositionContextProvider></TransactionSettingsContextProvider></MultichainContextProvider></Trace>;\n}\n","\"use strict\";\nimport { PositionStatus, ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { useMemo } from \"react\";\nimport { unwrappedToken } from \"utils/unwrappedToken\";\nexport default function useInitialPosition(positionInfo) {\n  return useMemo(() => {\n    if (!positionInfo) {\n      return void 0;\n    }\n    if (positionInfo.status !== PositionStatus.OUT_OF_RANGE) {\n      return void 0;\n    }\n    if (positionInfo.version !== ProtocolVersion.V3) {\n      return void 0;\n    }\n    if (!positionInfo.pool) {\n      return void 0;\n    }\n    const tickLower = Number(positionInfo.tickLower);\n    const tickUpper = Number(positionInfo.tickUpper);\n    const shouldFlip = unwrappedToken(positionInfo.pool.token1).isNative;\n    return {\n      tickLower: shouldFlip ? -tickUpper : tickLower,\n      tickUpper: shouldFlip ? -tickLower : tickUpper,\n      isOutOfRange: positionInfo.status === PositionStatus.OUT_OF_RANGE\n    };\n  }, [positionInfo]);\n}\n","\"use strict\";\nimport { WRAPPED_NATIVE_CURRENCY, nativeOnChain } from \"uniswap/src/constants/tokens\";\nexport function unwrappedToken(currency) {\n  if (currency.isNative) {\n    return currency;\n  }\n  if (WRAPPED_NATIVE_CURRENCY[currency.chainId]?.equals(currency)) {\n    return nativeOnChain(currency.chainId);\n  }\n  return currency;\n}\n","import { useQuery } from \"@connectrpc/connect-query\";\nimport { getPosition } from \"@uniswap/client-pools/dist/pools/v1/api-PoolsService_connectquery\";\nimport { uniswapGetTransport } from \"uniswap/src/data/rest/base\";\nexport function useGetPositionQuery(input) {\n  return useQuery(getPosition, input, { transport: uniswapGetTransport, enabled: !!input });\n}\n"],"names":["_cn2","_cn","LiquidityModalHeader","title","closeModal","goBack","t","useTranslation","CloseIconComponent","useMemo","ModalCloseIcon","testId","onClose","div","className","TouchableArea","onPress","BackArrow","color","size","Text","variant","flexGrow","textAlign","pr","SwapFormSettings","adjustTopAlignment","settings","Slippage","Deadline","defaultTitle","TokenInfo","currencyAmount","currencyUSDAmount","isMigrating","currency","formatCurrencyAmount","useLocalizationContext","getCurrencyForProtocol","ProtocolVersion","V4","value","type","NumberType","TokenNonTx","getSymbolDisplayText","symbol","FiatStandard","CurrencyLogo","iconSizes","icon36","MigrateV3PositionTxContext","createContext","MigrateV3PositionTxContextProvider","children","positionInfo","migrateTokenApprovals","feeValue0","feeValue1","currentTransactionStep","account","useAccount","hasMigrateErrorResponse","setHasMigrateErrorResponse","useState","derivedPositionInfo","positionState","useCreatePositionContext","useV3OrV4PositionDerivedInfo","derivedPriceRangeInfo","priceRangeState","fullRange","usePriceRangeContext","increaseLiquidityApprovalParams","address","simulateTransaction","walletAddress","chainId","currency0Amount","protocol","ProtocolItems","V3","positionToken","tokenId","data","isLoading","approvalLoading","error","approvalError","refetch","approvalRefetch","useCheckLpApprovalQuery","params","headers","UniversalRouterVersion","_2_0","staleTime","ONE_SECOND_MS","enabled","Boolean","message","parseErrorMessageTitle","logger","tags","file","function","approvalsNeeded","permitData","migratePositionRequestArgs","protocolVersion","pool","liquidity","destinationPool","mockPool","tickLower","tickSpaceLimits","ticks","tickUpper","inputProtocol","Number","inputPosition","token0","isNative","ZERO_ADDRESS","token1","currency1Amount","fee","feeTier","tickSpacing","inputPoolLiquidity","toString","inputCurrentTick","tickCurrent","inputSqrtRatioX96","sqrtRatioX96","inputPositionLiquidity","outputProtocol","outputPosition","getCurrencyAddressForTradingApi","currency0","currency1","feeAmount","hooks","hook","outputPoolLiquidity","creatingPoolOrPair","outputSqrtRatioX96","outputCurrentTick","initialPrice","expectedTokenOwed0RawAmount","quotient","expectedTokenOwed1RawAmount","amount0","amount1","isRangeValid","V2","invalidPrice","invalidRange","isQueryEnabled","step","TransactionStepType","MigratePositionTransactionStep","MigratePositionTransactionStepAsync","migrateCalldata","migrateError","migrateRefetch","rest","queryKey","ReactQueryCacheKey","TradingApi","uniswapUrls","tradingApiPaths","migrate","useQuery","queryFn","name","migrateLpPosition","useMigrateV3LpPositionCalldataQuery","refetchInterval","retry","useEffect","sendAnalyticsEvent","InterfaceEventNameLocal","MigrateLiquidityFailed","validatedValue","validatedPermitRequest","validatePermit","txRequest","validateTransactionRequest","outputAmount0","CurrencyAmount","fromRawAmount","outputAmount1","LiquidityTransactionType","Migrate","unsigned","approveToken0Request","approveToken1Request","permit","approvePositionTokenRequest","revokeToken0Request","revokeToken1Request","action","Provider","txInfo","getErrorMessageToDisplay","calldataError","_cn8","_cn7","_cn6","_cn5","_cn4","_cn3","BodyWrapper","styled","Main","backgroundColor","display","flexDirection","gap","mt","mx","width","zIndex","p","MigrateV3Inner","chainName","useParams","trace","useTrace","setPositionState","setStep","setCurrentTransactionStep","setPriceRangeState","setDepositState","useDepositContext","isMigrateToV4Enabled","useFeatureFlag","FeatureFlags","MigrateV3ToV4","transactionSteps","setTransactionSteps","selectChain","useSelectChain","startChainId","useAccountMeta","dispatch","useDispatch","context","useContext","Error","useMigrateV3TxContext","media","useMedia","navigate","useNavigate","owner","currency0FiatAmount","useUSDCValue","currency1FiatAmount","isSameAddress","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","to","Trans","i18nKey","ChevronRight","Flex","row","borderRadius","alignItems","justifyContent","py","px","ClickableTamaguiStyle","DEFAULT_POSITION_STATE","currencyInputs","PositionField","TOKEN0","TOKEN1","DEFAULT_PRICE_RANGE_STATE","DEFAULT_DEPOSIT_STATE","PositionFlowStep","SELECT_TOKENS_AND_FEE_TIER","RotateLeft","xl","alignSelf","$platform-web","position","top","INTERFACE_NAV_HEIGHT","PoolProgressIndicator","steps","label","active","PRICE_RANGE","LiquidityPositionCard","liquidityPosition","disabled","ArrowDown","SelectTokensStep","maxWidth","tokensLocked","onContinue","EditSelectTokensStep","Container","SelectPriceRangeStep","onDisableContinue","isValidTx","isValidLiquidityTxContext","AccountType","SignerMnemonic","liquiditySaga","actions","trigger","liquidityTxContext","setCurrentStep","setSteps","onSuccess","onFailure","analytics","getLPBaseAnalyticsProperties","currency0AmountUsd","currency1AmountUsd","poolId","version","ErrorCallout","errorMessage","Modal","ModalName","MigrateLiquidity","isDismissible","isModalOpen","ProgressIndicator","currentStep","MigrateV3","useChainIdFromUrlParam","positionLoading","useGetPositionQuery","parseRestPosition","initialPosition","status","PositionStatus","OUT_OF_RANGE","shouldFlip","unwrappedToken","isOutOfRange","useInitialPosition","LoadingRows","LoadingRow","Trace","logImpression","page","InterfacePageNameLocal","properties","pool_address","chain_id","join","fee_tier","token0Address","currencyIdToAddress","currencyId","token1Address","MultichainContextProvider","initialChainId","TransactionSettingsContextProvider","settingKey","TransactionSettingKey","LP","CreatePositionContextProvider","initialState","PriceRangeContextProvider","DepositContextProvider","WRAPPED_NATIVE_CURRENCY","equals","nativeOnChain","input","getPosition","transport","uniswapGetTransport"],"sourceRoot":""}