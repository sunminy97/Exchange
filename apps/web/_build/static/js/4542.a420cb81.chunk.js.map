{"version":3,"file":"static/js/4542.a420cb81.chunk.js","mappings":"oWAeO,SAASA,GAA+B,QAC7CC,EAAO,sBACPC,EAAqB,SACrBC,EAAQ,kBACRC,EAAiB,8BACjBC,EAA6B,8BAC7BC,EAA6B,SAC7BC,EAAQ,4BACRC,EAA2B,cAC3BC,EAAa,WACbC,EAAU,4BACVC,IAsBA,OAAO,WACL,IAAIV,EAAQW,cAAiBV,EAG7B,OAAKD,EAAQY,SAAYP,EAA8BQ,SAAYT,EAA8BS,aAI7Fb,EAAQY,UAAYX,EAInBG,EAA8BS,SAfnCH,IATIL,EAA8BQ,QAChCP,EAAS,UAGXJ,GAASY,EAAAA,EAAAA,KAAwB,IACjCL,OAZAF,IACAC,EAAcO,OACdZ,SACAE,EAA8BQ,SAAU,GAgC1C,CACF,CACe,SAASG,IACtB,MAAMhB,GAAUiB,EAAAA,EAAAA,MACRC,cAAejB,IAA0BkB,EAAAA,EAAAA,OAC3C,WAAEV,IAAeW,EAAAA,EAAAA,KACjBZ,GAAgBa,EAAAA,EAAAA,KAChBnB,GAAWoB,EAAAA,EAAAA,OACV,CAAEC,IAAWC,EAAAA,EAAAA,IAAQC,EAAAA,GACtBrB,GAAgCsB,EAAAA,EAAAA,QAAOlB,EAAcmB,QACrDtB,GAAgCqB,EAAAA,EAAAA,SAAO,GACvCpB,GAAWsB,EAAAA,EAAAA,MACXrB,GAA8BsB,EAAAA,EAAAA,IAAcC,EAAAA,GAAUC,wBACtDrB,GAA8BsB,EAAAA,EAAAA,KAAS,KAC3CC,YAAW,KACTV,EAAQW,EAAAA,EAAUC,UAClB3B,EAAcO,OACdX,EAA8BS,SAAU,CAAI,GAC3C,IAAI,KAEH,kBAAEV,IAAsBiC,EAAAA,EAAAA,GAAqB,CAAEC,UAAW3B,IAC1D4B,GAAmBN,EAAAA,EAAAA,KAAS,IAAMvB,MAClC8B,GAAsBC,EAAAA,EAAAA,UAC1B,IAAMzC,EAA+B,CACnCC,UACAC,wBACAC,WACAC,oBACAC,gCACAC,gCACAC,WACAC,8BACAC,gBACAC,WAAY6B,EACZ5B,iCAEF,CACEV,EACAC,EACAC,EACAC,EACAG,EACAC,EACAC,EACA8B,EACA5B,IAMJ,OAHA+B,EAAAA,EAAAA,YAAU,KACRF,GAAqB,GACpB,CAACA,KACG,SAACG,EAAAA,EAAIA,CAAAA,EACd,C","sources":["pages/PasskeyManagement/index.tsx"],"sourcesContent":["\"use strict\";\nimport { useAccountDrawer } from \"components/AccountDrawer/MiniPortfolio/hooks\";\nimport { MenuState, miniPortfolioMenuStateAtom } from \"components/AccountDrawer/constants\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useDisconnect } from \"hooks/useDisconnect\";\nimport { useSignInWithPasskey } from \"hooks/useSignInWithPasskey\";\nimport { useAtom } from \"jotai\";\nimport Swap from \"pages/Swap\";\nimport { useEffect, useMemo, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useCloseModal } from \"state/application/hooks\";\nimport { setIsTestnetModeEnabled } from \"uniswap/src/features/settings/slice\";\nimport { ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { useEvent } from \"utilities/src/react/hooks\";\nexport function handleRouteToPasskeyManagement({\n  account,\n  embeddedWalletAddress,\n  dispatch,\n  signInWithPasskey,\n  accountDrawerHasBeenOpenedRef,\n  passkeyConnectionAttemptedRef,\n  navigate,\n  closeRecentlyConnectedModal,\n  accountDrawer,\n  disconnect,\n  navigateToPasskeyManagement\n}) {\n  function handleUserNotConnected() {\n    closeRecentlyConnectedModal();\n    accountDrawer.open();\n    signInWithPasskey();\n    passkeyConnectionAttemptedRef.current = true;\n    return;\n  }\n  function handleInvalidWalletAddress() {\n    if (passkeyConnectionAttemptedRef.current) {\n      navigate(\"/swap\");\n      return;\n    }\n    dispatch(setIsTestnetModeEnabled(false));\n    disconnect();\n    return;\n  }\n  function handleEmbeddedWalletConnected() {\n    navigateToPasskeyManagement();\n    return;\n  }\n  return function handlePasskeyEffect() {\n    if (account.isConnecting || !embeddedWalletAddress) {\n      return;\n    }\n    if (!account.address && !passkeyConnectionAttemptedRef.current && !accountDrawerHasBeenOpenedRef.current) {\n      handleUserNotConnected();\n      return;\n    }\n    if (account.address !== embeddedWalletAddress) {\n      handleInvalidWalletAddress();\n      return;\n    }\n    if (!accountDrawerHasBeenOpenedRef.current) {\n      handleEmbeddedWalletConnected();\n      return;\n    }\n  };\n}\nexport default function PasskeyManagement() {\n  const account = useAccount();\n  const { walletAddress: embeddedWalletAddress } = useParams();\n  const { disconnect } = useDisconnect();\n  const accountDrawer = useAccountDrawer();\n  const dispatch = useDispatch();\n  const [, setMenu] = useAtom(miniPortfolioMenuStateAtom);\n  const accountDrawerHasBeenOpenedRef = useRef(accountDrawer.isOpen);\n  const passkeyConnectionAttemptedRef = useRef(false);\n  const navigate = useNavigate();\n  const closeRecentlyConnectedModal = useCloseModal(ModalName.RecentlyConnectedModal);\n  const navigateToPasskeyManagement = useEvent(() => {\n    setTimeout(() => {\n      setMenu(MenuState.PASSKEYS);\n      accountDrawer.open();\n      accountDrawerHasBeenOpenedRef.current = true;\n    }, 125);\n  });\n  const { signInWithPasskey } = useSignInWithPasskey({ onSuccess: navigateToPasskeyManagement });\n  const stableDisconnect = useEvent(() => disconnect());\n  const handlePasskeyEffect = useMemo(\n    () => handleRouteToPasskeyManagement({\n      account,\n      embeddedWalletAddress,\n      dispatch,\n      signInWithPasskey,\n      accountDrawerHasBeenOpenedRef,\n      passkeyConnectionAttemptedRef,\n      navigate,\n      closeRecentlyConnectedModal,\n      accountDrawer,\n      disconnect: stableDisconnect,\n      navigateToPasskeyManagement\n    }),\n    [\n      account,\n      embeddedWalletAddress,\n      dispatch,\n      signInWithPasskey,\n      navigate,\n      closeRecentlyConnectedModal,\n      accountDrawer,\n      stableDisconnect,\n      navigateToPasskeyManagement\n    ]\n  );\n  useEffect(() => {\n    handlePasskeyEffect();\n  }, [handlePasskeyEffect]);\n  return <Swap />;\n}\n"],"names":["handleRouteToPasskeyManagement","account","embeddedWalletAddress","dispatch","signInWithPasskey","accountDrawerHasBeenOpenedRef","passkeyConnectionAttemptedRef","navigate","closeRecentlyConnectedModal","accountDrawer","disconnect","navigateToPasskeyManagement","isConnecting","address","current","setIsTestnetModeEnabled","open","PasskeyManagement","useAccount","walletAddress","useParams","useDisconnect","useAccountDrawer","useDispatch","setMenu","useAtom","miniPortfolioMenuStateAtom","useRef","isOpen","useNavigate","useCloseModal","ModalName","RecentlyConnectedModal","useEvent","setTimeout","MenuState","PASSKEYS","useSignInWithPasskey","onSuccess","stableDisconnect","handlePasskeyEffect","useMemo","useEffect","Swap"],"sourceRoot":""}